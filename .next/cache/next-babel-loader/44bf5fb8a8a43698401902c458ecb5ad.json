{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport NavBar from '../../components/NavBar';\nimport { Container, Button, TextField } from '@material-ui/core';\n\nvar dictionary = function dictionary(_ref) {\n  var data = _ref.data;\n\n  var _useState = useState(''),\n      searchWord = _useState[0],\n      setSearchWord = _useState[1];\n\n  var _useState2 = useState([]),\n      words = _useState2[0],\n      setWords = _useState2[1];\n\n  var _useState3 = useState([]),\n      matchedWords = _useState3[0],\n      setMatchedWords = _useState3[1];\n\n  var _useState4 = useState(),\n      wordErrors = _useState4[0],\n      setWordErrors = _useState4[1];\n\n  var _useState5 = useState(false),\n      file = _useState5[0],\n      setFile = _useState5[1];\n\n  var handleChange = function handleChange(e) {\n    return _regeneratorRuntime.async(function handleChange$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setWordErrors('');\n            setSearchWord(e.target.value);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var router = useRouter();\n  var imdbID = data.imdbID,\n      Title = data.Title,\n      Year = data.Year,\n      Poster = data.Poster,\n      Genre = data.Genre,\n      Director = data.Director,\n      Actors = data.Actors,\n      Metascore = data.Metascore,\n      imdbRating = data.imdbRating,\n      imdbVotes = data.imdbVotes;\n\n  var handleSubmit = function handleSubmit(e) {\n    var searchForm, config, body, res, config2;\n    return _regeneratorRuntime.async(function handleSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            e.preventDefault();\n            searchForm = {\n              imdbID: imdbID,\n              Title: Title,\n              searchWord: searchWord,\n              Year: Year,\n              Poster: Poster,\n              Genre: Genre,\n              Director: Director,\n              Actors: Actors,\n              Metascore: Metascore,\n              imdbRating: imdbRating,\n              imdbVotes: imdbVotes\n            }; // For new word submission\n\n            _context2.prev = 2;\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            body = JSON.stringify(searchForm);\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(Axios.post(\"/api/\".concat(router.query.movieId, \"/dict\"), body, config));\n\n          case 7:\n            res = _context2.sent;\n            alert(res.data);\n            setSearchWord('');\n            _context2.next = 15;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](2);\n\n            if (_context2.t0.response) {\n              setWordErrors(_context2.t0.response.data.errors[0].msg);\n            }\n\n          case 15:\n            _context2.prev = 15;\n            config2 = {\n              'Content-Type': 'application/json'\n            };\n            Axios.get(\"/api/\".concat(router.query.movieId, \"/dict\"), config2).then(function (res) {\n              setWords(res);\n            });\n            _context2.next = 24;\n            break;\n\n          case 20:\n            _context2.prev = 20;\n            _context2.t1 = _context2[\"catch\"](15);\n\n            if (!_context2.t1) {\n              _context2.next = 24;\n              break;\n            }\n\n            throw _context2.t1;\n\n          case 24:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[2, 12], [15, 20]], Promise);\n  };\n\n  useEffect(function () {\n    // Fetching all the words on the initial render of the page\n    var config = {\n      'Content-Type': 'application/json'\n    };\n    Axios.get(\"/api/\".concat(router.query.movieId, \"/dict\"), config).then(function (res) {\n      setWords(res);\n    }); // checcking for whether the subtitle for it is already there or not\n\n    var config2 = {\n      'Content-Type': 'application/json'\n    };\n    Axios.get(\"/api/\".concat(router.query.movieId, \"/subtitles\"), config2).then(function (res) {\n      setFile(res.data);\n    });\n  }, []); //To display the matched words with the subtitles\n\n  var handleSearch = function handleSearch(e) {\n    var res;\n    return _regeneratorRuntime.async(function handleSearch$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (words.data.length) {\n              _context3.next = 4;\n              break;\n            }\n\n            alert(\"No word is added yet!\");\n            _context3.next = 9;\n            break;\n\n          case 4:\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(Axios.get(\"/api/\".concat(data.imdbID, \"/dict/matched\")));\n\n          case 6:\n            res = _context3.sent;\n            setMatchedWords([]);\n            words.data.map(function (item) {\n              if (!(res.data.search(item.word) === -1)) {\n                setMatchedWords(function (prevArray) {\n                  return [].concat(_toConsumableArray(prevArray), [item]);\n                });\n              }\n            });\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, \"Movies Words\")), __jsx(NavBar, null), __jsx(\"p\", {\n    className: \"currentMovieTitle\"\n  }, data.Title), __jsx(Container, null, __jsx(\"form\", {\n    method: \"POST\",\n    action: \"/api/\".concat(data.imdbID, \"/subtitles\"),\n    enctype: \"multipart/form-data\",\n    className: \"formStyle\"\n  }, __jsx(\"input\", {\n    style: {\n      fontSize: '17px',\n      width: '225px'\n    },\n    type: \"file\",\n    name: \"profile\",\n    placeholder: \"Upload it's subtitles\"\n  }), __jsx(\"button\", {\n    style: {\n      fontSize: '17px'\n    }\n  }, \"Upload subtitle\")), __jsx(\"br\", null), file ? __jsx(\"span\", {\n    style: {\n      \"float\": 'right',\n      position: 'relative'\n    }\n  }, __jsx(\"span\", null, \"Subtitles Found!\"), __jsx(\"br\", null), __jsx(Button, {\n    variant: \"contained\",\n    onClick: function onClick(e) {\n      return handleSearch(e);\n    },\n    style: {\n      margin: '10px 25px'\n    }\n  }, \"Search\")) : null, __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"form\", {\n    onSubmit: function onSubmit(e) {\n      return handleSubmit(e);\n    }\n  }, __jsx(TextField, {\n    error: Boolean(wordErrors),\n    value: searchWord,\n    label: wordErrors ? 'Error' : 'Add a word',\n    helperText: wordErrors,\n    onChange: function onChange(e) {\n      return handleChange(e);\n    },\n    placeholder: \"Enter the word\"\n  })), __jsx(\"br\", null), matchedWords.length > 0 && __jsx(\"div\", {\n    style: {\n      display: 'inlineFlow'\n    }\n  }, __jsx(\"p\", {\n    style: {\n      textAlign: 'center',\n      fontSize: '18px'\n    }\n  }, \"Matched words...\"), matchedWords.map(function (each) {\n    return __jsx(\"div\", {\n      className: \"matchedWords\"\n    }, each.word);\n  })), __jsx(\"br\", null), __jsx(WordResults, {\n    words: words\n  })));\n};\n\ndictionary.getInitialProps = function _callee(ctx) {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!ctx.query.movieId) {\n            _context4.next = 8;\n            break;\n          }\n\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"http://www.omdbapi.com/?i=\".concat(ctx.query.movieId, \"&type=movie&apikey=\").concat(process.env.OmdbKey)));\n\n        case 3:\n          res = _context4.sent;\n          _context4.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          data = _context4.sent;\n          return _context4.abrupt(\"return\", {\n            data: data\n          });\n\n        case 8:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default dictionary;","map":null,"metadata":{},"sourceType":"module"}