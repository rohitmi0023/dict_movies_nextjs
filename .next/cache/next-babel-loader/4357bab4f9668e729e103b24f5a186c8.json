{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router'; // import WordResults from '../../components/WordResults';\n\nconst dictionary = ({\n  data\n}) => {\n  const {\n    0: searchWord,\n    1: setSearchWord\n  } = useState('');\n  const {\n    0: words,\n    1: setWords\n  } = useState([]);\n\n  const handleChange = async e => {\n    setSearchWord(e.target.value);\n  };\n\n  const router = useRouter();\n  const {\n    imdbID,\n    Title,\n    Year,\n    Poster,\n    Genre,\n    Director,\n    Actors,\n    Metascore,\n    imdbRating,\n    imdbVotes\n  } = data;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const searchForm = {\n      imdbID,\n      Title,\n      searchWord,\n      Year,\n      Poster,\n      Genre,\n      Director,\n      Actors,\n      Metascore,\n      imdbRating,\n      imdbVotes\n    };\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const body = JSON.stringify(searchForm);\n      const res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n      const config2 = {\n        'Content-Type': 'application/json'\n      };\n      const res2 = await Axios.get(`/api/${router.query.movieId}/dict`, config2);\n      setWords(res2);\n      setSearchWord('');\n      alert(res.data);\n    } catch (err) {\n      if (err) throw err;\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n    console.log(`1`);\n    Axios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n      setWords(res);\n    });\n  }, [words]);\n  return __jsx(Fragment, null, __jsx(\"p\", null, \"Movie Title: \", data.Title), __jsx(\"form\", {\n    onSubmit: e => handleSubmit(e)\n  }, __jsx(\"label\", null, \"Search\"), __jsx(\"input\", {\n    type: \"text\",\n    value: searchWord,\n    onChange: e => handleChange(e)\n  })), __jsx(\"br\", null), __jsx(\"p\", null, data.Title, \" Dictionary...\"), words.data ? words.data.length ? __jsx(\"div\", null, words.data.map(each => {\n    return __jsx(\"span\", {\n      key: each.id\n    }, each.word, \" \", '  ');\n  })) : __jsx(\"p\", null, \"Nothing found!!!\") : __jsx(\"p\", null, \"Loading...\"));\n};\n\ndictionary.getInitialProps = async ctx => {\n  if (ctx.query.movieId) {\n    const res = await fetch(`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`);\n    const data = await res.json();\n    return {\n      data\n    };\n  }\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/[movieId]/dict.js"],"names":["React","Fragment","useState","useEffect","Axios","fetch","useRouter","dictionary","data","searchWord","setSearchWord","words","setWords","handleChange","e","target","value","router","imdbID","Title","Year","Poster","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","handleSubmit","preventDefault","searchForm","config","headers","body","JSON","stringify","res","post","query","movieId","config2","res2","get","alert","err","console","log","then","length","map","each","id","word","getInitialProps","ctx","process","env","OmdbKey","json"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\n// import WordResults from '../../components/WordResults';\n\nconst dictionary = ({ data }) => {\n\tconst [searchWord, setSearchWord] = useState('');\n\tconst [words, setWords] = useState([]);\n\n\tconst handleChange = async e => {\n\t\tsetSearchWord(e.target.value);\n\t};\n\tconst router = useRouter();\n\tconst {\n\t\timdbID,\n\t\tTitle,\n\t\tYear,\n\t\tPoster,\n\t\tGenre,\n\t\tDirector,\n\t\tActors,\n\t\tMetascore,\n\t\timdbRating,\n\t\timdbVotes,\n\t} = data;\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst searchForm = {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tsearchWord,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t};\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst body = JSON.stringify(searchForm);\n\t\t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n\t\t\tconst config2 = {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t};\n\t\t\tconst res2 = await Axios.get(`/api/${router.query.movieId}/dict`, config2);\n\t\t\tsetWords(res2);\n\t\t\tsetSearchWord('');\n\t\t\talert(res.data);\n\t\t} catch (err) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\tuseEffect(() => {\n\t\tconst config = {\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tconsole.log(`1`);\n\t\tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n\t\t\tsetWords(res);\n\t\t});\n\t}, [words]);\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<p>Movie Title: {data.Title}</p>\n\t\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t<label>Search</label>\n\t\t\t\t<input type='text' value={searchWord} onChange={e => handleChange(e)}></input>\n\t\t\t</form>\n\t\t\t<br />\n\t\t\t<p>{data.Title} Dictionary...</p>\n\t\t\t{words.data ? (\n\t\t\t\twords.data.length ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{words.data.map(each => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<span key={each.id}>\n\t\t\t\t\t\t\t\t\t{each.word} {'  '}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<p>Nothing found!!!</p>\n\t\t\t\t)\n\t\t\t) : (\n\t\t\t\t<p>Loading...</p>\n\t\t\t)}\n\t\t</Fragment>\n\t);\n};\n\ndictionary.getInitialProps = async ctx => {\n\tif (ctx.query.movieId) {\n\t\tconst res = await fetch(\n\t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t);\n\t\tconst data = await res.json();\n\t\treturn { data };\n\t}\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}