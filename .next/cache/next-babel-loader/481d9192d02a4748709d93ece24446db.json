{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults'; // import { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nimport ExposureNeg1TwoToneIcon from '@material-ui/icons/ExposureNeg1TwoTone';\n\nvar dictionary = function dictionary(_ref) {\n  var data = _ref.data;\n\n  // const [searchWord, setSearchWord] = useState('');\n  var _useState = useState({\n    response: '',\n    upIcon: ''\n  }),\n      words = _useState[0],\n      setWords = _useState[1]; // const handleChange = async e => {\n  // \tsetSearchWord(e.target.value);\n  // };\n\n\n  var router = useRouter(); // const {\n  // \timdbID,\n  // \tTitle,\n  // \tYear,\n  // \tPoster,\n  // \tGenre,\n  // \tDirector,\n  // \tActors,\n  // \tMetascore,\n  // \timdbRating,\n  // \timdbVotes,\n  // } = data;\n  // const handleSubmit = async e => {\n  // \te.preventDefault();\n  // \tconst searchForm = {\n  // \t\timdbID,\n  // \t\tTitle,\n  // \t\tsearchWord,\n  // \t\tYear,\n  // \t\tPoster,\n  // \t\tGenre,\n  // \t\tDirector,\n  // \t\tActors,\n  // \t\tMetascore,\n  // \t\timdbRating,\n  // \t\timdbVotes,\n  // \t};\n  // \ttry {\n  // \t\tconst config = {\n  // \t\t\theaders: {\n  // \t\t\t\t'Content-Type': 'application/json',\n  // \t\t\t},\n  // \t\t};\n  // \t\tconst body = JSON.stringify(searchForm);\n  // \t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n  // \t\tsetSearchWord('');\n  // \t\tconst config2 = {\n  // \t\t\t'Content-Type': 'application/json',\n  // \t\t};\n  // \t\tAxios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n  // \t\t\tsetWords(res);\n  // \t\t});\n  // \t\talert(res.data);\n  // \t} catch (err) {\n  // \t\tif (err) throw err;\n  // \t\tconsole.log(err);\n  // \t}\n  // };\n\n  useEffect(function () {\n    var config = {\n      'Content-Type': 'application/json'\n    };\n    Axios.get(\"/api/\".concat(router.query.movieId, \"/dict\"), config).then(function (res) {\n      setWords({\n        response: \"\".concat(res),\n        upIcon: \"\".concat(ExposureNeg1TwoToneIcon)\n      });\n    });\n  }, []);\n  return __jsx(\"div\", {\n    className: \"container\"\n  }, console.log(words.response), __jsx(Head, null, __jsx(\"title\", null, \"Next App\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\",\n    integrity: \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\",\n    crossorigin: \"anonymous\"\n  })), __jsx(\"p\", null, \"Movie Title: \", data.Title), __jsx(\"br\", null), __jsx(WordResults, {\n    words: words\n  }));\n};\n\ndictionary.getInitialProps = function _callee(ctx) {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!ctx.query.movieId) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"http://www.omdbapi.com/?i=\".concat(ctx.query.movieId, \"&type=movie&apikey=\").concat(process.env.OmdbKey)));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/[movieId]/dict.js"],"names":["React","Fragment","useState","useEffect","Head","Axios","fetch","useRouter","WordResults","ExposureNeg1TwoToneIcon","dictionary","data","response","upIcon","words","setWords","router","config","get","query","movieId","then","res","console","log","Title","getInitialProps","ctx","process","env","OmdbKey","json"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,WAAP,MAAwB,8BAAxB,C,CACA;;AACA,OAAOC,uBAAP,MAAoC,wCAApC;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAChC;AADgC,kBAENT,QAAQ,CAAC;AAClCU,IAAAA,QAAQ,EAAE,EADwB;AAElCC,IAAAA,MAAM,EAAE;AAF0B,GAAD,CAFF;AAAA,MAEzBC,KAFyB;AAAA,MAElBC,QAFkB,iBAOhC;AACA;AACA;;;AACA,MAAMC,MAAM,GAAGT,SAAS,EAAxB,CAVgC,CAWhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAJ,EAAAA,SAAS,CAAC,YAAM;AACf,QAAMc,MAAM,GAAG;AACd,sBAAgB;AADF,KAAf;AAGAZ,IAAAA,KAAK,CAACa,GAAN,gBAAkBF,MAAM,CAACG,KAAP,CAAaC,OAA/B,YAA+CH,MAA/C,EAAuDI,IAAvD,CAA4D,UAAAC,GAAG,EAAI;AAClEP,MAAAA,QAAQ,CAAC;AAAEH,QAAAA,QAAQ,YAAKU,GAAL,CAAV;AAAsBT,QAAAA,MAAM,YAAKJ,uBAAL;AAA5B,OAAD,CAAR;AACA,KAFD;AAGA,GAPQ,EAON,EAPM,CAAT;AASA,SACC;AAAK,IAAA,SAAS,EAAC;AAAf,KACEc,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACF,QAAlB,CADF,EAEC,MAAC,IAAD,QACC,gCADD,EAEC;AACC,IAAA,GAAG,EAAC,YADL;AAEC,IAAA,IAAI,EAAC,uEAFN;AAGC,IAAA,SAAS,EAAC,yEAHX;AAIC,IAAA,WAAW,EAAC;AAJb,IAFD,CAFD,EAWC,kCAAiBD,IAAI,CAACc,KAAtB,CAXD,EA2BC,iBA3BD,EA4BC,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEX;AAApB,IA5BD,CADD;AAgCA,CAtGD;;AAwGAJ,UAAU,CAACgB,eAAX,GAA6B,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACxBA,GAAG,CAACR,KAAJ,CAAUC,OADc;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAETd,KAAK,qCACOqB,GAAG,CAACR,KAAJ,CAAUC,OADjB,gCAC8CQ,OAAO,CAACC,GAAR,CAAYC,OAD1D,EAFI;;AAAA;AAErBR,UAAAA,GAFqB;AAAA;AAAA,2CAKRA,GAAG,CAACS,IAAJ,EALQ;;AAAA;AAKrBpB,UAAAA,IALqB;AAAA,2CAMpB;AAAEA,YAAAA,IAAI,EAAJA;AAAF,WANoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B;;AAUA,eAAeD,UAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\n// import { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport ExposureNeg1TwoToneIcon from '@material-ui/icons/ExposureNeg1TwoTone';\n\nconst dictionary = ({ data }) => {\n\t// const [searchWord, setSearchWord] = useState('');\n\tconst [words, setWords] = useState({\n\t\tresponse: '',\n\t\tupIcon: '',\n\t});\n\n\t// const handleChange = async e => {\n\t// \tsetSearchWord(e.target.value);\n\t// };\n\tconst router = useRouter();\n\t// const {\n\t// \timdbID,\n\t// \tTitle,\n\t// \tYear,\n\t// \tPoster,\n\t// \tGenre,\n\t// \tDirector,\n\t// \tActors,\n\t// \tMetascore,\n\t// \timdbRating,\n\t// \timdbVotes,\n\t// } = data;\n\n\t// const handleSubmit = async e => {\n\t// \te.preventDefault();\n\t// \tconst searchForm = {\n\t// \t\timdbID,\n\t// \t\tTitle,\n\t// \t\tsearchWord,\n\t// \t\tYear,\n\t// \t\tPoster,\n\t// \t\tGenre,\n\t// \t\tDirector,\n\t// \t\tActors,\n\t// \t\tMetascore,\n\t// \t\timdbRating,\n\t// \t\timdbVotes,\n\t// \t};\n\t// \ttry {\n\t// \t\tconst config = {\n\t// \t\t\theaders: {\n\t// \t\t\t\t'Content-Type': 'application/json',\n\t// \t\t\t},\n\t// \t\t};\n\t// \t\tconst body = JSON.stringify(searchForm);\n\t// \t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n\t// \t\tsetSearchWord('');\n\t// \t\tconst config2 = {\n\t// \t\t\t'Content-Type': 'application/json',\n\t// \t\t};\n\t// \t\tAxios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n\t// \t\t\tsetWords(res);\n\t// \t\t});\n\t// \t\talert(res.data);\n\t// \t} catch (err) {\n\t// \t\tif (err) throw err;\n\t// \t\tconsole.log(err);\n\t// \t}\n\t// };\n\n\tuseEffect(() => {\n\t\tconst config = {\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n\t\t\tsetWords({ response: `${res}`, upIcon: `${ExposureNeg1TwoToneIcon}` });\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<div className='container'>\n\t\t\t{console.log(words.response)}\n\t\t\t<Head>\n\t\t\t\t<title>Next App</title>\n\t\t\t\t<link\n\t\t\t\t\trel='stylesheet'\n\t\t\t\t\thref='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css'\n\t\t\t\t\tintegrity='sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm'\n\t\t\t\t\tcrossorigin='anonymous'\n\t\t\t\t/>\n\t\t\t</Head>\n\t\t\t<p>Movie Title: {data.Title}</p>\n\t\t\t{/* <Form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t<FormGroup>\n\t\t\t\t\t<Label>Search</Label>\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tvalue={searchWord}\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tonChange={e => handleChange(e)}\n\t\t\t\t\t\tplaceholder='Enter the word'\n\t\t\t\t\t></Input>\n\t\t\t\t</FormGroup>\n\t\t\t\t<Button type='submit' className='btn btn-primary'>\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t</Form> */}\n\t\t\t<br />\n\t\t\t<WordResults words={words} />\n\t\t</div>\n\t);\n};\n\ndictionary.getInitialProps = async ctx => {\n\tif (ctx.query.movieId) {\n\t\tconst res = await fetch(\n\t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t);\n\t\tconst data = await res.json();\n\t\treturn { data };\n\t}\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}