{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport ExposurePlus1TwoToneIcon from '@material-ui/icons/ExposurePlus1TwoTone';\nimport ExposureNeg1TwoToneIcon from '@material-ui/icons/ExposureNeg1TwoTone';\nimport Axios from 'axios';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport { Chip } from '@material-ui/core';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\n\nconst WordResults = ({\n  words\n}) => {\n  const handleClick = async (word_id, vote) => {\n    const value = localStorage.getItem('user');\n\n    if (value) {\n      localStorage.clear();\n      const word_id_var = {\n        word_id: `${word_id}`,\n        vote: `${vote}`\n      };\n      const body = JSON.stringify(word_id_var);\n      console.log(body);\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const res = await Axios.post(`/api/:id/dict/${word_id}`, body, config);\n      alert(res.data);\n    } else {\n      alert('You can vote just once per session!!!');\n    }\n  };\n\n  let wordList;\n\n  if (words.data) {\n    wordList = words.data.map(each => {\n      return __jsx(\"div\", {\n        key: each.id,\n        style: {\n          border: '2px solid black',\n          margin: '5px 5px',\n          fontWeight: '500',\n          fontStyle: 'italic',\n          padding: '10px 10px',\n          display: 'inline-block'\n        }\n      }, each.word, \" \", '   ', __jsx(ThumbUpIcon, {\n        onClick: () => handleClick(each.id, +1)\n      }), \" \", '  ', \" \", each.upvotes, ' ', __jsx(ThumbDownIcon, {\n        onClick: () => handleClick(each.id, -1)\n      }), ' ');\n    });\n  }\n\n  return __jsx(\"div\", null, words.length + 1 ? __jsx(\"p\", null, \"Loading!!!\") : words.data.length ? __jsx(\"div\", {\n    style: {\n      display: 'inlineFlow'\n    }\n  }, wordList) : __jsx(\"p\", null, \"Nothing Found\"));\n};\n\nexport default WordResults;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/components/WordResults.js"],"names":["React","useEffect","ExposurePlus1TwoToneIcon","ExposureNeg1TwoToneIcon","Axios","ThumbDownIcon","Chip","ThumbUpIcon","WordResults","words","handleClick","word_id","vote","value","localStorage","getItem","clear","word_id_var","body","JSON","stringify","console","log","config","headers","res","post","alert","data","wordList","map","each","id","border","margin","fontWeight","fontStyle","padding","display","word","upvotes","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,wBAAP,MAAqC,yCAArC;AACA,OAAOC,uBAAP,MAAoC,wCAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAClC,QAAMC,WAAW,GAAG,OAAOC,OAAP,EAAgBC,IAAhB,KAAyB;AAC5C,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAd;;AACA,QAAIF,KAAJ,EAAW;AACVC,MAAAA,YAAY,CAACE,KAAb;AACA,YAAMC,WAAW,GAAG;AACnBN,QAAAA,OAAO,EAAG,GAAEA,OAAQ,EADD;AAEnBC,QAAAA,IAAI,EAAG,GAAEA,IAAK;AAFK,OAApB;AAIA,YAAMM,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeH,WAAf,CAAb;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,YAAMK,MAAM,GAAG;AACdC,QAAAA,OAAO,EAAE;AACR,0BAAgB;AADR;AADK,OAAf;AAKA,YAAMC,GAAG,GAAG,MAAMrB,KAAK,CAACsB,IAAN,CAAY,iBAAgBf,OAAQ,EAApC,EAAuCO,IAAvC,EAA6CK,MAA7C,CAAlB;AACAI,MAAAA,KAAK,CAACF,GAAG,CAACG,IAAL,CAAL;AACA,KAfD,MAeO;AACND,MAAAA,KAAK,CAAC,uCAAD,CAAL;AACA;AACD,GApBD;;AAqBA,MAAIE,QAAJ;;AACA,MAAIpB,KAAK,CAACmB,IAAV,EAAgB;AACfC,IAAAA,QAAQ,GAAGpB,KAAK,CAACmB,IAAN,CAAWE,GAAX,CAAeC,IAAI,IAAI;AACjC,aACC;AACC,QAAA,GAAG,EAAEA,IAAI,CAACC,EADX;AAEC,QAAA,KAAK,EAAE;AACNC,UAAAA,MAAM,EAAE,iBADF;AAENC,UAAAA,MAAM,EAAE,SAFF;AAGNC,UAAAA,UAAU,EAAE,KAHN;AAINC,UAAAA,SAAS,EAAE,QAJL;AAKNC,UAAAA,OAAO,EAAE,WALH;AAMNC,UAAAA,OAAO,EAAE;AANH;AAFR,SAWEP,IAAI,CAACQ,IAXP,OAWc,KAXd,EAYC,MAAC,WAAD;AAAa,QAAA,OAAO,EAAE,MAAM7B,WAAW,CAACqB,IAAI,CAACC,EAAN,EAAU,CAAC,CAAX;AAAvC,QAZD,OAY2D,IAZ3D,OAYkED,IAAI,CAACS,OAZvE,EAYgF,GAZhF,EAaC,MAAC,aAAD;AAAe,QAAA,OAAO,EAAE,MAAM9B,WAAW,CAACqB,IAAI,CAACC,EAAN,EAAU,CAAC,CAAX;AAAzC,QAbD,EAa4D,GAb5D,CADD;AAiBA,KAlBU,CAAX;AAmBA;;AAED,SACC,mBACEvB,KAAK,CAACgC,MAAN,GAAe,CAAf,GACA,8BADA,GAEGhC,KAAK,CAACmB,IAAN,CAAWa,MAAX,GACH;AAAK,IAAA,KAAK,EAAE;AAAEH,MAAAA,OAAO,EAAE;AAAX;AAAZ,KAAwCT,QAAxC,CADG,GAGH,iCANF,CADD;AAWA,CAxDD;;AA0DA,eAAerB,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport ExposurePlus1TwoToneIcon from '@material-ui/icons/ExposurePlus1TwoTone';\nimport ExposureNeg1TwoToneIcon from '@material-ui/icons/ExposureNeg1TwoTone';\nimport Axios from 'axios';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport { Chip } from '@material-ui/core';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\n\nconst WordResults = ({ words }) => {\n\tconst handleClick = async (word_id, vote) => {\n\t\tconst value = localStorage.getItem('user');\n\t\tif (value) {\n\t\t\tlocalStorage.clear();\n\t\t\tconst word_id_var = {\n\t\t\t\tword_id: `${word_id}`,\n\t\t\t\tvote: `${vote}`,\n\t\t\t};\n\t\t\tconst body = JSON.stringify(word_id_var);\n\t\t\tconsole.log(body);\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst res = await Axios.post(`/api/:id/dict/${word_id}`, body, config);\n\t\t\talert(res.data);\n\t\t} else {\n\t\t\talert('You can vote just once per session!!!');\n\t\t}\n\t};\n\tlet wordList;\n\tif (words.data) {\n\t\twordList = words.data.map(each => {\n\t\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tkey={each.id}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tborder: '2px solid black',\n\t\t\t\t\t\tmargin: '5px 5px',\n\t\t\t\t\t\tfontWeight: '500',\n\t\t\t\t\t\tfontStyle: 'italic',\n\t\t\t\t\t\tpadding: '10px 10px',\n\t\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{each.word} {'   '}\n\t\t\t\t\t<ThumbUpIcon onClick={() => handleClick(each.id, +1)} /> {'  '} {each.upvotes}{' '}\n\t\t\t\t\t<ThumbDownIcon onClick={() => handleClick(each.id, -1)} />{' '}\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{words.length + 1 ? (\n\t\t\t\t<p>Loading!!!</p>\n\t\t\t) : words.data.length ? (\n\t\t\t\t<div style={{ display: 'inlineFlow' }}>{wordList}</div>\n\t\t\t) : (\n\t\t\t\t<p>Nothing Found</p>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default WordResults;\n"]},"metadata":{},"sourceType":"module"}