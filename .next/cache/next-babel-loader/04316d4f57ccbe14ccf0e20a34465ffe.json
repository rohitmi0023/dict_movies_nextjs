{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport NavBar from '../../components/NavBar';\nimport { Container, Button, TextField } from '@material-ui/core';\n\nvar dictionary = function dictionary(_ref) {\n  var query = _ref.query;\n\n  var _useState = useState(''),\n      currentMovie = _useState[0],\n      setCurrentMovie = _useState[1];\n\n  var _useState2 = useState(''),\n      searchWord = _useState2[0],\n      setSearchWord = _useState2[1];\n\n  var _useState3 = useState([]),\n      words = _useState3[0],\n      setWords = _useState3[1];\n\n  var _useState4 = useState([]),\n      matchedWords = _useState4[0],\n      setMatchedWords = _useState4[1];\n\n  var _useState5 = useState(),\n      wordErrors = _useState5[0],\n      setWordErrors = _useState5[1];\n\n  var _useState6 = useState(false),\n      file = _useState6[0],\n      setFile = _useState6[1];\n\n  var handleChange = function handleChange(e) {\n    return _regeneratorRuntime.async(function handleChange$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setWordErrors('');\n            setSearchWord(e.target.value);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var router = useRouter();\n\n  var handleSubmit = function handleSubmit(e) {\n    var imdbID, Title, Year, Poster, Genre, Director, Actors, Metascore, imdbRating, imdbVotes, searchForm, config, body, res, config2;\n    return _regeneratorRuntime.async(function handleSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            e.preventDefault();\n            imdbID = currentMovie.imdbID, Title = currentMovie.Title, Year = currentMovie.Year, Poster = currentMovie.Poster, Genre = currentMovie.Genre, Director = currentMovie.Director, Actors = currentMovie.Actors, Metascore = currentMovie.Metascore, imdbRating = currentMovie.imdbRating, imdbVotes = currentMovie.imdbVotes;\n            searchForm = {\n              imdbID: imdbID,\n              Title: Title,\n              searchWord: searchWord,\n              Year: Year,\n              Poster: Poster,\n              Genre: Genre,\n              Director: Director,\n              Actors: Actors,\n              Metascore: Metascore,\n              imdbRating: imdbRating,\n              imdbVotes: imdbVotes\n            }; // For new word submission\n\n            _context2.prev = 3;\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            body = JSON.stringify(searchForm);\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(Axios.post(\"/api/\".concat(router.query.movieId, \"/dict\"), body, config));\n\n          case 8:\n            res = _context2.sent;\n            alert(res.data);\n            setSearchWord('');\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](3);\n\n            if (_context2.t0.response) {\n              setWordErrors(_context2.t0.response.data.errors[0].msg);\n            }\n\n          case 16:\n            _context2.prev = 16;\n            config2 = {\n              'Content-Type': 'application/json'\n            };\n            Axios.get(\"/api/\".concat(router.query.movieId, \"/dict\"), config2).then(function (res) {\n              setWords(res);\n            });\n            _context2.next = 25;\n            break;\n\n          case 21:\n            _context2.prev = 21;\n            _context2.t1 = _context2[\"catch\"](16);\n\n            if (!_context2.t1) {\n              _context2.next = 25;\n              break;\n            }\n\n            throw _context2.t1;\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[3, 13], [16, 21]], Promise);\n  };\n\n  useEffect(function () {\n    // Fetching the current movie details\n    var config = {\n      'Content-Type': 'application/json'\n    };\n    console.log(query); // Axios.get(\n    // \t`https://www.omdbapi.com/?i=${router.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n    // ).then(res => {\n    // \tconsole.log(res);\n    // \tsetCurrentMovie(res.data);\n    // });\n    // Fetching all the words on the initial render of the page\n\n    Axios.get(\"/api/\".concat(router.query.movieId, \"/dict\"), config).then(function (res) {\n      setWords(res);\n    }); // checcking for whether the subtitle for it is already there or not\n\n    Axios.get(\"/api/\".concat(router.query.movieId, \"/subtitles\"), config).then(function (res) {\n      setFile(res.data);\n    });\n  }, []); //To display the matched words with the subtitles\n\n  var handleSearch = function handleSearch(e) {\n    var res;\n    return _regeneratorRuntime.async(function handleSearch$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (words.data.length) {\n              _context3.next = 4;\n              break;\n            }\n\n            alert(\"No word is added yet!\");\n            _context3.next = 9;\n            break;\n\n          case 4:\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(Axios.get(\"/api/\".concat(data.imdbID, \"/dict/matched\")));\n\n          case 6:\n            res = _context3.sent;\n            setMatchedWords([]);\n            words.data.map(function (item) {\n              if (!(res.data.search(item.word) === -1)) {\n                setMatchedWords(function (prevArray) {\n                  return [].concat(_toConsumableArray(prevArray), [item]);\n                });\n              }\n            });\n\n          case 9:\n            if (!matchedWords.length) {\n              alert('Nothing matched!');\n            }\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, \"Movies Words\")), __jsx(NavBar, null), console.log(currentMovie), currentMovie ? __jsx(\"div\", null, currentMovie.Title) : __jsx(\"p\", null, \"Loading...\"));\n};\n\ndictionary.getInitialProps = function _callee(_ref2) {\n  var query;\n  return _regeneratorRuntime.async(function _callee$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          query = _ref2.query;\n          return _context4.abrupt(\"return\", {\n            query: query\n          });\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/src/pages/[movieId]/dict.js"],"names":["useState","useEffect","Head","Axios","fetch","useRouter","WordResults","NavBar","Container","Button","TextField","dictionary","query","currentMovie","setCurrentMovie","searchWord","setSearchWord","words","setWords","matchedWords","setMatchedWords","wordErrors","setWordErrors","file","setFile","handleChange","e","target","value","router","handleSubmit","preventDefault","imdbID","Title","Year","Poster","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","searchForm","config","headers","body","JSON","stringify","post","movieId","res","alert","data","response","errors","msg","config2","get","then","console","log","handleSearch","length","map","item","search","word","prevArray","getInitialProps"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport NavBar from '../../components/NavBar';\nimport { Container, Button, TextField } from '@material-ui/core';\n\nconst dictionary = ({ query }) => {\n\tconst [currentMovie, setCurrentMovie] = useState('');\n\tconst [searchWord, setSearchWord] = useState('');\n\tconst [words, setWords] = useState([]);\n\tconst [matchedWords, setMatchedWords] = useState([]);\n\tconst [wordErrors, setWordErrors] = useState();\n\tconst [file, setFile] = useState(false);\n\tconst handleChange = async e => {\n\t\tsetWordErrors('');\n\t\tsetSearchWord(e.target.value);\n\t};\n\n\tconst router = useRouter();\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t} = currentMovie;\n\t\tconst searchForm = {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tsearchWord,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t};\n\t\t// For new word submission\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst body = JSON.stringify(searchForm);\n\t\t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n\t\t\talert(res.data);\n\t\t\tsetSearchWord('');\n\t\t} catch (err) {\n\t\t\tif (err.response) {\n\t\t\t\tsetWordErrors(err.response.data.errors[0].msg);\n\t\t\t}\n\t\t}\n\t\t// for fetching all the words including the recent one just after submission\n\t\ttry {\n\t\t\tconst config2 = {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t};\n\t\t\tAxios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n\t\t\t\tsetWords(res);\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tif (error) throw error;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\t// Fetching the current movie details\n\t\tconst config = {\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tconsole.log(query);\n\t\t// Axios.get(\n\t\t// \t`https://www.omdbapi.com/?i=${router.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t// ).then(res => {\n\t\t// \tconsole.log(res);\n\t\t// \tsetCurrentMovie(res.data);\n\t\t// });\n\t\t// Fetching all the words on the initial render of the page\n\t\tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n\t\t\tsetWords(res);\n\t\t});\n\t\t// checcking for whether the subtitle for it is already there or not\n\t\tAxios.get(`/api/${router.query.movieId}/subtitles`, config).then(res => {\n\t\t\tsetFile(res.data);\n\t\t});\n\t}, []);\n\n\t//To display the matched words with the subtitles\n\tconst handleSearch = async e => {\n\t\tif (!words.data.length) {\n\t\t\talert(`No word is added yet!`);\n\t\t} else {\n\t\t\tconst res = await Axios.get(`/api/${data.imdbID}/dict/matched`);\n\t\t\tsetMatchedWords([]);\n\t\t\twords.data.map(item => {\n\t\t\t\tif (!(res.data.search(item.word) === -1)) {\n\t\t\t\t\tsetMatchedWords(prevArray => [...prevArray, item]);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!matchedWords.length) {\n\t\t\talert('Nothing matched!');\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Head>\n\t\t\t\t<title>Movies Words</title>\n\t\t\t</Head>\n\t\t\t<NavBar />\n\t\t\t{console.log(currentMovie)}\n\t\t\t{currentMovie ? <div>{currentMovie.Title}</div> : <p>Loading...</p>}\n\t\t\t{/* <p className='currentMovieTitle'>{data.Title}</p>\n\t\t\t<Container>\n\t\t\t\t<form\n\t\t\t\t\tmethod='POST'\n\t\t\t\t\taction={`/api/${data.imdbID}/subtitles`}\n\t\t\t\t\tenctype='multipart/form-data'\n\t\t\t\t\tclassName='formStyle'\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{ fontSize: '17px', width: '225px' }}\n\t\t\t\t\t\ttype='file'\n\t\t\t\t\t\tname='profile'\n\t\t\t\t\t\tplaceholder=\"Upload it's subtitles\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button style={{ fontSize: '17px' }}>Upload subtitle</button>\n\t\t\t\t</form>\n\t\t\t\t<br />\n\t\t\t\t{file ? (\n\t\t\t\t\t<span style={{ float: 'right', position: 'relative' }}>\n\t\t\t\t\t\t<span>Subtitles Found!</span>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\tonClick={e => handleSearch(e)}\n\t\t\t\t\t\t\tstyle={{ margin: '10px 25px' }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</span>\n\t\t\t\t) : null}\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\terror={Boolean(wordErrors)}\n\t\t\t\t\t\tvalue={searchWord}\n\t\t\t\t\t\tlabel={wordErrors ? 'Error' : 'Add a word'}\n\t\t\t\t\t\thelperText={wordErrors}\n\t\t\t\t\t\tonChange={e => handleChange(e)}\n\t\t\t\t\t\tplaceholder='Enter the word'\n\t\t\t\t\t></TextField>\n\t\t\t\t</form>\n\t\t\t\t<br />\n\t\t\t\t{matchedWords.length > 0 && (\n\t\t\t\t\t<div style={{ display: 'inlineFlow' }}>\n\t\t\t\t\t\t<p style={{ textAlign: 'center', fontSize: '18px' }}>Matched words...</p>\n\t\t\t\t\t\t{matchedWords.map(each => {\n\t\t\t\t\t\t\treturn <div className='matchedWords'>{each.word}</div>;\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<br />\n\t\t\t\t<WordResults words={words} />\n\t\t\t</Container> */}\n\t\t</div>\n\t);\n};\n\ndictionary.getInitialProps = async ({ query }) => {\n\treturn { query };\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}