{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport NavBar from '../../components/NavBar';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { Container, Button, TextField } from '@material-ui/core';\nimport { black } from '@material-ui/core/colors';\n\nconst dictionary = ({\n  data\n}) => {\n  const {\n    0: searchWord,\n    1: setSearchWord\n  } = useState('');\n  const {\n    0: words,\n    1: setWords\n  } = useState([]);\n  const {\n    0: matchedWords,\n    1: setMatchedWords\n  } = useState([]);\n  const {\n    0: wordErrors,\n    1: setWordErrors\n  } = useState();\n\n  const handleChange = async e => {\n    setWordErrors('');\n    setSearchWord(e.target.value);\n  };\n\n  const router = useRouter();\n  const {\n    imdbID,\n    Title,\n    Year,\n    Poster,\n    Genre,\n    Director,\n    Actors,\n    Metascore,\n    imdbRating,\n    imdbVotes\n  } = data;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const searchForm = {\n      imdbID,\n      Title,\n      searchWord,\n      Year,\n      Poster,\n      Genre,\n      Director,\n      Actors,\n      Metascore,\n      imdbRating,\n      imdbVotes\n    };\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const body = JSON.stringify(searchForm);\n      const res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n      console.log(res);\n      setSearchWord('');\n    } catch (err) {\n      console.log(err.response);\n      setWordErrors(err.response.data.errors[0].msg);\n    }\n\n    try {\n      const config2 = {\n        'Content-Type': 'application/json'\n      };\n      Axios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n        setWords(res);\n      });\n    } catch (error) {\n      if (error) throw error;\n    }\n  };\n\n  useEffect(() => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n    Axios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n      setWords(res);\n    });\n  }, []);\n\n  const handleSearch = async e => {\n    if (!words.data.length) {\n      alert(`No word is added yet!`);\n    } else {\n      const res = await Axios.get(`/api/${data.imdbID}/dict/matched`);\n\n      if (res.data === 'No subtitles found') {\n        alert('No subtitles was found!!!');\n      } else {\n        words.data.map(each => {\n          let result = res.data.data.search(each.word);\n\n          if (result !== -1 && matchedWords.indexOf(each.word) === -1) {\n            setMatchedWords(oldArray => [...oldArray, each.word]);\n          }\n        });\n      }\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, \"Movies Words\")), __jsx(NavBar, null), __jsx(\"p\", {\n    style: {\n      textAlign: 'center',\n      fontSize: '20px'\n    }\n  }, data.Title), __jsx(Container, null, __jsx(\"form\", {\n    method: \"POST\",\n    action: `/api/${data.imdbID}/subtitles`,\n    enctype: \"multipart/form-data\"\n  }, __jsx(\"input\", {\n    style: {\n      fontSize: '17px',\n      width: '225px'\n    },\n    type: \"file\",\n    name: \"profile\",\n    placeholder: \"Upload it's subtitles\"\n  }), __jsx(\"button\", {\n    style: {\n      fontSize: '17px'\n    }\n  }, \"Upload\")), __jsx(\"br\", null), __jsx(Button, {\n    variant: \"contained\",\n    onClick: e => handleSearch(e)\n  }, \"Search\"), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"form\", {\n    onSubmit: e => handleSubmit(e)\n  }, __jsx(ThemeProvider, {\n    theme: black\n  }, __jsx(TextField, {\n    error: Boolean(wordErrors),\n    value: searchWord,\n    label: wordErrors ? 'Error' : 'Add a word',\n    helperText: wordErrors,\n    onChange: e => handleChange(e),\n    placeholder: \"Enter the word\"\n  }))), __jsx(\"br\", null), matchedWords.length > 0 && __jsx(\"div\", null, matchedWords), __jsx(\"br\", null), __jsx(WordResults, {\n    words: words\n  })));\n};\n\ndictionary.getInitialProps = async ctx => {\n  if (ctx.query.movieId) {\n    const res = await fetch(`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`);\n    const data = await res.json();\n    return {\n      data\n    };\n  }\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/[movieId]/dict.js"],"names":["React","Fragment","useState","useEffect","Head","Axios","fetch","useRouter","WordResults","NavBar","ThemeProvider","Container","Button","TextField","black","dictionary","data","searchWord","setSearchWord","words","setWords","matchedWords","setMatchedWords","wordErrors","setWordErrors","handleChange","e","target","value","router","imdbID","Title","Year","Poster","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","handleSubmit","preventDefault","searchForm","config","headers","body","JSON","stringify","res","post","query","movieId","console","log","err","response","errors","msg","config2","get","then","error","handleSearch","length","alert","map","each","result","search","word","indexOf","oldArray","textAlign","fontSize","width","Boolean","getInitialProps","ctx","process","env","OmdbKey","json"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,SAA5B,QAA6C,mBAA7C;AACA,SAASC,KAAT,QAAsB,0BAAtB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAChC,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BhB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACiB,KAAD;AAAA,OAAQC;AAAR,MAAoBlB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACmB,YAAD;AAAA,OAAeC;AAAf,MAAkCpB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAA,OAACqB,UAAD;AAAA,OAAaC;AAAb,MAA8BtB,QAAQ,EAA5C;;AAEA,QAAMuB,YAAY,GAAG,MAAMC,CAAN,IAAW;AAC/BF,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAN,IAAAA,aAAa,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACA,GAHD;;AAIA,QAAMC,MAAM,GAAGtB,SAAS,EAAxB;AACA,QAAM;AACLuB,IAAAA,MADK;AAELC,IAAAA,KAFK;AAGLC,IAAAA,IAHK;AAILC,IAAAA,MAJK;AAKLC,IAAAA,KALK;AAMLC,IAAAA,QANK;AAOLC,IAAAA,MAPK;AAQLC,IAAAA,SARK;AASLC,IAAAA,UATK;AAULC,IAAAA;AAVK,MAWFvB,IAXJ;;AAaA,QAAMwB,YAAY,GAAG,MAAMd,CAAN,IAAW;AAC/BA,IAAAA,CAAC,CAACe,cAAF;AACA,UAAMC,UAAU,GAAG;AAClBZ,MAAAA,MADkB;AAElBC,MAAAA,KAFkB;AAGlBd,MAAAA,UAHkB;AAIlBe,MAAAA,IAJkB;AAKlBC,MAAAA,MALkB;AAMlBC,MAAAA,KANkB;AAOlBC,MAAAA,QAPkB;AAQlBC,MAAAA,MARkB;AASlBC,MAAAA,SATkB;AAUlBC,MAAAA,UAVkB;AAWlBC,MAAAA;AAXkB,KAAnB;;AAaA,QAAI;AACH,YAAMI,MAAM,GAAG;AACdC,QAAAA,OAAO,EAAE;AACR,0BAAgB;AADR;AADK,OAAf;AAKA,YAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeL,UAAf,CAAb;AACA,YAAMM,GAAG,GAAG,MAAM3C,KAAK,CAAC4C,IAAN,CAAY,QAAOpB,MAAM,CAACqB,KAAP,CAAaC,OAAQ,OAAxC,EAAgDN,IAAhD,EAAsDF,MAAtD,CAAlB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACA9B,MAAAA,aAAa,CAAC,EAAD,CAAb;AACA,KAVD,CAUE,OAAOoC,GAAP,EAAY;AACbF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAG,CAACC,QAAhB;AACA/B,MAAAA,aAAa,CAAC8B,GAAG,CAACC,QAAJ,CAAavC,IAAb,CAAkBwC,MAAlB,CAAyB,CAAzB,EAA4BC,GAA7B,CAAb;AACA;;AACD,QAAI;AACH,YAAMC,OAAO,GAAG;AACf,wBAAgB;AADD,OAAhB;AAGArD,MAAAA,KAAK,CAACsD,GAAN,CAAW,QAAO9B,MAAM,CAACqB,KAAP,CAAaC,OAAQ,OAAvC,EAA+CO,OAA/C,EAAwDE,IAAxD,CAA6DZ,GAAG,IAAI;AACnE5B,QAAAA,QAAQ,CAAC4B,GAAD,CAAR;AACA,OAFD;AAGA,KAPD,CAOE,OAAOa,KAAP,EAAc;AACf,UAAIA,KAAJ,EAAW,MAAMA,KAAN;AACX;AACD,GAvCD;;AAyCA1D,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMwC,MAAM,GAAG;AACd,sBAAgB;AADF,KAAf;AAGAtC,IAAAA,KAAK,CAACsD,GAAN,CAAW,QAAO9B,MAAM,CAACqB,KAAP,CAAaC,OAAQ,OAAvC,EAA+CR,MAA/C,EAAuDiB,IAAvD,CAA4DZ,GAAG,IAAI;AAClE5B,MAAAA,QAAQ,CAAC4B,GAAD,CAAR;AACA,KAFD;AAGA,GAPQ,EAON,EAPM,CAAT;;AASA,QAAMc,YAAY,GAAG,MAAMpC,CAAN,IAAW;AAC/B,QAAI,CAACP,KAAK,CAACH,IAAN,CAAW+C,MAAhB,EAAwB;AACvBC,MAAAA,KAAK,CAAE,uBAAF,CAAL;AACA,KAFD,MAEO;AACN,YAAMhB,GAAG,GAAG,MAAM3C,KAAK,CAACsD,GAAN,CAAW,QAAO3C,IAAI,CAACc,MAAO,eAA9B,CAAlB;;AACA,UAAIkB,GAAG,CAAChC,IAAJ,KAAa,oBAAjB,EAAuC;AACtCgD,QAAAA,KAAK,CAAC,2BAAD,CAAL;AACA,OAFD,MAEO;AACN7C,QAAAA,KAAK,CAACH,IAAN,CAAWiD,GAAX,CAAeC,IAAI,IAAI;AACtB,cAAIC,MAAM,GAAGnB,GAAG,CAAChC,IAAJ,CAASA,IAAT,CAAcoD,MAAd,CAAqBF,IAAI,CAACG,IAA1B,CAAb;;AACA,cAAIF,MAAM,KAAK,CAAC,CAAZ,IAAiB9C,YAAY,CAACiD,OAAb,CAAqBJ,IAAI,CAACG,IAA1B,MAAoC,CAAC,CAA1D,EAA6D;AAC5D/C,YAAAA,eAAe,CAACiD,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAcL,IAAI,CAACG,IAAnB,CAAb,CAAf;AACA;AACD,SALD;AAMA;AACD;AACD,GAhBD;;AAkBA,SACC,mBACC,MAAC,IAAD,QACC,oCADD,CADD,EAIC,MAAC,MAAD,OAJD,EAKC;AAAG,IAAA,KAAK,EAAE;AAAEG,MAAAA,SAAS,EAAE,QAAb;AAAuBC,MAAAA,QAAQ,EAAE;AAAjC;AAAV,KAAsDzD,IAAI,CAACe,KAA3D,CALD,EAMC,MAAC,SAAD,QACC;AACC,IAAA,MAAM,EAAC,MADR;AAEC,IAAA,MAAM,EAAG,QAAOf,IAAI,CAACc,MAAO,YAF7B;AAGC,IAAA,OAAO,EAAC;AAHT,KAKC;AACC,IAAA,KAAK,EAAE;AAAE2C,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,KAAK,EAAE;AAA3B,KADR;AAEC,IAAA,IAAI,EAAC,MAFN;AAGC,IAAA,IAAI,EAAC,SAHN;AAIC,IAAA,WAAW,EAAC;AAJb,IALD,EAWC;AAAQ,IAAA,KAAK,EAAE;AAAED,MAAAA,QAAQ,EAAE;AAAZ;AAAf,cAXD,CADD,EAcC,iBAdD,EAeC,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,OAAO,EAAE/C,CAAC,IAAIoC,YAAY,CAACpC,CAAD;AAAtD,cAfD,EAkBC,iBAlBD,EAmBC,iBAnBD,EAoBC;AAAM,IAAA,QAAQ,EAAEA,CAAC,IAAIc,YAAY,CAACd,CAAD;AAAjC,KACC,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEZ;AAAtB,KACC,MAAC,SAAD;AACC,IAAA,KAAK,EAAE6D,OAAO,CAACpD,UAAD,CADf;AAEC,IAAA,KAAK,EAAEN,UAFR;AAGC,IAAA,KAAK,EAAEM,UAAU,GAAG,OAAH,GAAa,YAH/B;AAIC,IAAA,UAAU,EAAEA,UAJb;AAKC,IAAA,QAAQ,EAAEG,CAAC,IAAID,YAAY,CAACC,CAAD,CAL5B;AAMC,IAAA,WAAW,EAAC;AANb,IADD,CADD,CApBD,EAgCC,iBAhCD,EAiCEL,YAAY,CAAC0C,MAAb,GAAsB,CAAtB,IAA2B,mBAAM1C,YAAN,CAjC7B,EAkCC,iBAlCD,EAmCC,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEF;AAApB,IAnCD,CAND,CADD;AA8CA,CA1ID;;AA4IAJ,UAAU,CAAC6D,eAAX,GAA6B,MAAMC,GAAN,IAAa;AACzC,MAAIA,GAAG,CAAC3B,KAAJ,CAAUC,OAAd,EAAuB;AACtB,UAAMH,GAAG,GAAG,MAAM1C,KAAK,CACrB,6BAA4BuE,GAAG,CAAC3B,KAAJ,CAAUC,OAAQ,sBAAqB2B,OAAO,CAACC,GAAR,CAAYC,OAAQ,EADlE,CAAvB;AAGA,UAAMhE,IAAI,GAAG,MAAMgC,GAAG,CAACiC,IAAJ,EAAnB;AACA,WAAO;AAAEjE,MAAAA;AAAF,KAAP;AACA;AACD,CARD;;AAUA,eAAeD,UAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport NavBar from '../../components/NavBar';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { Container, Button, TextField } from '@material-ui/core';\nimport { black } from '@material-ui/core/colors';\n\nconst dictionary = ({ data }) => {\n\tconst [searchWord, setSearchWord] = useState('');\n\tconst [words, setWords] = useState([]);\n\tconst [matchedWords, setMatchedWords] = useState([]);\n\tconst [wordErrors, setWordErrors] = useState();\n\n\tconst handleChange = async e => {\n\t\tsetWordErrors('');\n\t\tsetSearchWord(e.target.value);\n\t};\n\tconst router = useRouter();\n\tconst {\n\t\timdbID,\n\t\tTitle,\n\t\tYear,\n\t\tPoster,\n\t\tGenre,\n\t\tDirector,\n\t\tActors,\n\t\tMetascore,\n\t\timdbRating,\n\t\timdbVotes,\n\t} = data;\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst searchForm = {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tsearchWord,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t};\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst body = JSON.stringify(searchForm);\n\t\t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n\t\t\tconsole.log(res);\n\t\t\tsetSearchWord('');\n\t\t} catch (err) {\n\t\t\tconsole.log(err.response);\n\t\t\tsetWordErrors(err.response.data.errors[0].msg);\n\t\t}\n\t\ttry {\n\t\t\tconst config2 = {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t};\n\t\t\tAxios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n\t\t\t\tsetWords(res);\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tif (error) throw error;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tconst config = {\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n\t\t\tsetWords(res);\n\t\t});\n\t}, []);\n\n\tconst handleSearch = async e => {\n\t\tif (!words.data.length) {\n\t\t\talert(`No word is added yet!`);\n\t\t} else {\n\t\t\tconst res = await Axios.get(`/api/${data.imdbID}/dict/matched`);\n\t\t\tif (res.data === 'No subtitles found') {\n\t\t\t\talert('No subtitles was found!!!');\n\t\t\t} else {\n\t\t\t\twords.data.map(each => {\n\t\t\t\t\tlet result = res.data.data.search(each.word);\n\t\t\t\t\tif (result !== -1 && matchedWords.indexOf(each.word) === -1) {\n\t\t\t\t\t\tsetMatchedWords(oldArray => [...oldArray, each.word]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Head>\n\t\t\t\t<title>Movies Words</title>\n\t\t\t</Head>\n\t\t\t<NavBar />\n\t\t\t<p style={{ textAlign: 'center', fontSize: '20px' }}>{data.Title}</p>\n\t\t\t<Container>\n\t\t\t\t<form\n\t\t\t\t\tmethod='POST'\n\t\t\t\t\taction={`/api/${data.imdbID}/subtitles`}\n\t\t\t\t\tenctype='multipart/form-data'\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{ fontSize: '17px', width: '225px' }}\n\t\t\t\t\t\ttype='file'\n\t\t\t\t\t\tname='profile'\n\t\t\t\t\t\tplaceholder=\"Upload it's subtitles\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button style={{ fontSize: '17px' }}>Upload</button>\n\t\t\t\t</form>\n\t\t\t\t<br />\n\t\t\t\t<Button variant='contained' onClick={e => handleSearch(e)}>\n\t\t\t\t\tSearch\n\t\t\t\t</Button>\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t\t<ThemeProvider theme={black}>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\terror={Boolean(wordErrors)}\n\t\t\t\t\t\t\tvalue={searchWord}\n\t\t\t\t\t\t\tlabel={wordErrors ? 'Error' : 'Add a word'}\n\t\t\t\t\t\t\thelperText={wordErrors}\n\t\t\t\t\t\t\tonChange={e => handleChange(e)}\n\t\t\t\t\t\t\tplaceholder='Enter the word'\n\t\t\t\t\t\t></TextField>\n\t\t\t\t\t</ThemeProvider>\n\t\t\t\t</form>\n\t\t\t\t<br />\n\t\t\t\t{matchedWords.length > 0 && <div>{matchedWords}</div>}\n\t\t\t\t<br />\n\t\t\t\t<WordResults words={words} />\n\t\t\t</Container>\n\t\t</div>\n\t);\n};\n\ndictionary.getInitialProps = async ctx => {\n\tif (ctx.query.movieId) {\n\t\tconst res = await fetch(\n\t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t);\n\t\tconst data = await res.json();\n\t\treturn { data };\n\t}\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}