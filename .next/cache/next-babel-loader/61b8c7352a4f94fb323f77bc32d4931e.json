{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport WordResults from '../../components/WordResults';\nimport NavBar from '../../components/NavBar';\nimport { Container, Button, TextField } from '@material-ui/core';\n\nconst dictionary = () => {\n  const {\n    0: currentMovie,\n    1: setCurrentMovie\n  } = useState('');\n  const {\n    0: searchWord,\n    1: setSearchWord\n  } = useState('');\n  const {\n    0: searched,\n    1: setSearched\n  } = useState(false);\n  const {\n    0: words,\n    1: setWords\n  } = useState([]);\n  const {\n    0: matchedWords,\n    1: setMatchedWords\n  } = useState([]);\n  const {\n    0: wordErrors,\n    1: setWordErrors\n  } = useState();\n  const {\n    0: file,\n    1: setFile\n  } = useState(false);\n\n  const handleChange = async e => {\n    setWordErrors('');\n    setSearchWord(e.target.value);\n  }; // Submitting a word\n\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const {\n      imdbID,\n      Title,\n      Year,\n      Poster,\n      Genre,\n      Director,\n      Actors,\n      Metascore,\n      imdbRating,\n      imdbVotes\n    } = currentMovie;\n    const searchForm = {\n      imdbID,\n      Title,\n      searchWord,\n      Year,\n      Poster,\n      Genre,\n      Director,\n      Actors,\n      Metascore,\n      imdbRating,\n      imdbVotes\n    }; // For new word submission\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const body = JSON.stringify(searchForm);\n      const res = await Axios.post(`/api/${imdbID}/dict`, body, config);\n      alert(res.data);\n      setSearchWord('');\n    } catch (err) {\n      if (err.response) {\n        setWordErrors(err.response.data.errors[0].msg);\n      }\n    } // for fetching all the words including the recent one just after submission\n\n\n    try {\n      const config2 = {\n        'Content-Type': 'application/json'\n      };\n      Axios.get(`/api/${imdbID}/dict`, config2).then(res => {\n        setWords(res);\n      });\n    } catch (error) {\n      if (error) throw error;\n    }\n  };\n\n  useEffect(() => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n    const movieId = window.location.pathname.replace('/', '').replace('/dict', ''); // Fetching the current movie details\n\n    Axios.get(`https://www.omdbapi.com/?i=${movieId}&type=movie&apikey=${process.env.OmdbKey}`).then(res => {\n      setCurrentMovie(res.data);\n    }); // Fetching all the words on the initial render of the page\n\n    Axios.get(`/api/${movieId}/dict`, config).then(res => {\n      setWords(res);\n    }); // checcking for whether the subtitle for it is already there or not\n\n    Axios.get(`/api/${movieId}/subtitles`, config).then(res => {\n      setFile(res.data);\n    });\n  }, []); //To display the matched words with the subtitles\n\n  const handleSearch = async e => {\n    setSearched(true);\n\n    if (!words.data.length) {\n      alert(`No word is added yet!`);\n    } else {\n      const res = await Axios.get(`/api/${currentMovie.imdbID}/dict/matched`);\n      setMatchedWords([]);\n      words.data.map(item => {\n        if (!(res.data.search(item.word) === -1)) {\n          setMatchedWords(prevArray => [...prevArray, item]);\n        }\n      });\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, \"Movies Words\")), __jsx(NavBar, null), currentMovie.imdbID ? __jsx(\"div\", null, __jsx(\"p\", {\n    className: \"currentMovieTitle\"\n  }, currentMovie.Title), __jsx(Container, null, __jsx(\"form\", {\n    method: \"POST\",\n    action: `/api/${currentMovie.imdbID}/subtitles`,\n    encType: \"multipart/form-data\",\n    className: \"formStyle\"\n  }, __jsx(\"input\", {\n    style: {\n      fontSize: '17px',\n      width: '225px'\n    },\n    type: \"file\",\n    name: \"profile\",\n    placeholder: \"Upload it's subtitles\"\n  }), __jsx(\"button\", {\n    style: {\n      fontSize: '17px'\n    }\n  }, \"Upload subtitle\")), __jsx(\"br\", null), file ? __jsx(\"span\", {\n    style: {\n      float: 'right',\n      position: 'relative'\n    }\n  }, __jsx(\"span\", null, \"Subtitles Found!\"), __jsx(\"br\", null), __jsx(Button, {\n    variant: \"contained\",\n    onClick: e => handleSearch(e),\n    style: {\n      margin: '10px 25px'\n    }\n  }, \"Search\")) : null, __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"form\", {\n    onSubmit: e => handleSubmit(e)\n  }, __jsx(TextField, {\n    error: Boolean(wordErrors),\n    value: searchWord,\n    label: wordErrors ? 'Error' : 'Add a word',\n    helperText: wordErrors,\n    onChange: e => handleChange(e),\n    placeholder: \"Enter the word\"\n  })), __jsx(\"br\", null), searched ? matchedWords.length > 0 ? __jsx(\"div\", {\n    style: {\n      display: 'inlineFlow'\n    }\n  }, __jsx(\"p\", {\n    style: {\n      textAlign: 'center',\n      fontSize: '18px'\n    }\n  }, \"Matched words...\"), matchedWords.map(each => {\n    return __jsx(\"div\", {\n      className: \"matchedWords\"\n    }, each.word);\n  })) : __jsx(\"p\", null, \"Nothing matched\") : __jsx(\"p\", null, \"Try searching to find matched words with the subtitles\"), __jsx(\"br\", null), __jsx(WordResults, {\n    words: words\n  }))) : __jsx(\"p\", null, \"Loading...\"));\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/src/pages/[movieId]/dict.js"],"names":["useState","useEffect","Head","Axios","WordResults","NavBar","Container","Button","TextField","dictionary","currentMovie","setCurrentMovie","searchWord","setSearchWord","searched","setSearched","words","setWords","matchedWords","setMatchedWords","wordErrors","setWordErrors","file","setFile","handleChange","e","target","value","handleSubmit","preventDefault","imdbID","Title","Year","Poster","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","searchForm","config","headers","body","JSON","stringify","res","post","alert","data","err","response","errors","msg","config2","get","then","error","movieId","window","location","pathname","replace","process","env","OmdbKey","handleSearch","length","map","item","search","word","prevArray","fontSize","width","float","position","margin","Boolean","display","textAlign","each"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport WordResults from '../../components/WordResults';\nimport NavBar from '../../components/NavBar';\nimport { Container, Button, TextField } from '@material-ui/core';\n\nconst dictionary = () => {\n\tconst [currentMovie, setCurrentMovie] = useState('');\n\tconst [searchWord, setSearchWord] = useState('');\n\tconst [searched, setSearched] = useState(false);\n\tconst [words, setWords] = useState([]);\n\tconst [matchedWords, setMatchedWords] = useState([]);\n\tconst [wordErrors, setWordErrors] = useState();\n\tconst [file, setFile] = useState(false);\n\tconst handleChange = async e => {\n\t\tsetWordErrors('');\n\t\tsetSearchWord(e.target.value);\n\t};\n\t// Submitting a word\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t} = currentMovie;\n\t\tconst searchForm = {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tsearchWord,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t};\n\t\t// For new word submission\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst body = JSON.stringify(searchForm);\n\t\t\tconst res = await Axios.post(`/api/${imdbID}/dict`, body, config);\n\t\t\talert(res.data);\n\t\t\tsetSearchWord('');\n\t\t} catch (err) {\n\t\t\tif (err.response) {\n\t\t\t\tsetWordErrors(err.response.data.errors[0].msg);\n\t\t\t}\n\t\t}\n\t\t// for fetching all the words including the recent one just after submission\n\t\ttry {\n\t\t\tconst config2 = {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t};\n\t\t\tAxios.get(`/api/${imdbID}/dict`, config2).then(res => {\n\t\t\t\tsetWords(res);\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tif (error) throw error;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tconst config = {\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tconst movieId = window.location.pathname.replace('/', '').replace('/dict', '');\n\t\t// Fetching the current movie details\n\t\tAxios.get(\n\t\t\t`https://www.omdbapi.com/?i=${movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t).then(res => {\n\t\t\tsetCurrentMovie(res.data);\n\t\t});\n\t\t// Fetching all the words on the initial render of the page\n\t\tAxios.get(`/api/${movieId}/dict`, config).then(res => {\n\t\t\tsetWords(res);\n\t\t});\n\t\t// checcking for whether the subtitle for it is already there or not\n\t\tAxios.get(`/api/${movieId}/subtitles`, config).then(res => {\n\t\t\tsetFile(res.data);\n\t\t});\n\t}, []);\n\n\t//To display the matched words with the subtitles\n\tconst handleSearch = async e => {\n\t\tsetSearched(true);\n\t\tif (!words.data.length) {\n\t\t\talert(`No word is added yet!`);\n\t\t} else {\n\t\t\tconst res = await Axios.get(`/api/${currentMovie.imdbID}/dict/matched`);\n\t\t\tsetMatchedWords([]);\n\t\t\twords.data.map(item => {\n\t\t\t\tif (!(res.data.search(item.word) === -1)) {\n\t\t\t\t\tsetMatchedWords(prevArray => [...prevArray, item]);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Head>\n\t\t\t\t<title>Movies Words</title>\n\t\t\t</Head>\n\t\t\t<NavBar />\n\t\t\t{currentMovie.imdbID ? (\n\t\t\t\t<div>\n\t\t\t\t\t<p className='currentMovieTitle'>{currentMovie.Title}</p>\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<form\n\t\t\t\t\t\t\tmethod='POST'\n\t\t\t\t\t\t\taction={`/api/${currentMovie.imdbID}/subtitles`}\n\t\t\t\t\t\t\tencType='multipart/form-data'\n\t\t\t\t\t\t\tclassName='formStyle'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tstyle={{ fontSize: '17px', width: '225px' }}\n\t\t\t\t\t\t\t\ttype='file'\n\t\t\t\t\t\t\t\tname='profile'\n\t\t\t\t\t\t\t\tplaceholder=\"Upload it's subtitles\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<button style={{ fontSize: '17px' }}>Upload subtitle</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t{/* Search button */}\n\t\t\t\t\t\t{file ? (\n\t\t\t\t\t\t\t<span style={{ float: 'right', position: 'relative' }}>\n\t\t\t\t\t\t\t\t<span>Subtitles Found!</span>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\t\tonClick={e => handleSearch(e)}\n\t\t\t\t\t\t\t\t\tstyle={{ margin: '10px 25px' }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\terror={Boolean(wordErrors)}\n\t\t\t\t\t\t\t\tvalue={searchWord}\n\t\t\t\t\t\t\t\tlabel={wordErrors ? 'Error' : 'Add a word'}\n\t\t\t\t\t\t\t\thelperText={wordErrors}\n\t\t\t\t\t\t\t\tonChange={e => handleChange(e)}\n\t\t\t\t\t\t\t\tplaceholder='Enter the word'\n\t\t\t\t\t\t\t></TextField>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t{searched ? (\n\t\t\t\t\t\t\tmatchedWords.length > 0 ? (\n\t\t\t\t\t\t\t\t<div style={{ display: 'inlineFlow' }}>\n\t\t\t\t\t\t\t\t\t<p style={{ textAlign: 'center', fontSize: '18px' }}>\n\t\t\t\t\t\t\t\t\t\tMatched words...\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t{matchedWords.map(each => {\n\t\t\t\t\t\t\t\t\t\treturn <div className='matchedWords'>{each.word}</div>;\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<p>Nothing matched</p>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<p>Try searching to find matched words with the subtitles</p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<WordResults words={words} />\n\t\t\t\t\t</Container>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<p>Loading...</p>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}