{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Router from 'next/router';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nconst SearchResult = ({\n  searchresult\n}) => {\n  const {\n    0: spacing,\n    1: setSpacing\n  } = useState(2);\n  let moviesList = [];\n  const movies = searchresult.data.Search;\n\n  const handleClick = Id => {\n    Router.push(`/[movieId]`, `/${Id}`);\n  };\n\n  if (movies) {\n    // User has not submitted the form, we are diplaying the array results\n    __jsx(Grid, {\n      container: true,\n      spacing: 2\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12\n    }, __jsx(Grid, {\n      container: true,\n      spacing: spacing\n    }, moviesList = movies.map(movie => {\n      return __jsx(Grid, {\n        key: movie.imdbID,\n        className: \"movie\",\n        item: true\n      }, __jsx(Paper, {\n        elevation: 5\n      }, __jsx(\"a\", {\n        onClick: () => handleClick(movie.imdbID)\n      }, ' ', __jsx(\"img\", {\n        src: movie.Poster,\n        className: \"moviePoster\",\n        alt: \"Movie poster\"\n      }), __jsx(\"p\", {\n        className: \"movieTitle\"\n      }, movie.Title, \" (\", movie.Year, \")\"))));\n    }), \";\")));\n  }\n\n  if (movies) {\n    // User has not submitted the form, we are diplaying the array results\n    moviesList = movies.map(movie => {\n      return __jsx(Grid, {\n        container: true,\n        spacing: 2\n      }, __jsx(Grid, {\n        item: true,\n        xs: 12\n      }, __jsx(Grid, {\n        container: true,\n        spacing: spacing\n      }, __jsx(Grid, {\n        key: movie.imdbID,\n        className: \"movie\",\n        item: true\n      }, __jsx(Paper, {\n        elevation: 5\n      }, __jsx(\"a\", {\n        onClick: () => handleClick(movie.imdbID)\n      }, ' ', __jsx(\"img\", {\n        src: movie.Poster,\n        className: \"moviePoster\",\n        alt: \"Movie poster\"\n      }), __jsx(\"p\", {\n        className: \"movieTitle\"\n      }, movie.Title, \" (\", movie.Year, \")\")))))));\n    });\n  } else {\n    // User has submiited the form, we are displaying the best matched result\n    moviesList.push(searchresult.data);\n    moviesList = moviesList.map(movie => {\n      return __jsx(\"div\", {\n        key: movie.imdbID,\n        className: \"movie\"\n      }, __jsx(\"a\", {\n        onClick: () => handleClick(movie.imdbID)\n      }, __jsx(\"img\", {\n        src: movie.Poster,\n        className: \"moviePoster\",\n        alt: \"Movie poster\"\n      }), __jsx(\"p\", {\n        className: \"movieTitle\"\n      }, movie.Title, \" (\", movie.Year, \")\")));\n    });\n  }\n\n  return __jsx(\"div\", null, __jsx(\"p\", {\n    style: {\n      textAlign: 'center',\n      textShadow: '4px 4px 9px black'\n    }\n  }, \"Search Results...\"), moviesList);\n};\n\nexport default SearchResult;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/components/SearchResult.js"],"names":["React","useState","Router","Paper","Grid","SearchResult","searchresult","spacing","setSpacing","moviesList","movies","data","Search","handleClick","Id","push","map","movie","imdbID","Poster","Title","Year","textAlign","textShadow"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Router from 'next/router';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nconst SearchResult = ({ searchresult }) => {\n\tconst [spacing, setSpacing] = useState(2);\n\tlet moviesList = [];\n\tconst movies = searchresult.data.Search;\n\n\tconst handleClick = Id => {\n\t\tRouter.push(`/[movieId]`, `/${Id}`);\n\t};\n\n\tif (movies) {\n\t\t// User has not submitted the form, we are diplaying the array results\n\t\t<Grid container spacing={2}>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<Grid container spacing={spacing}>\n\t\t\t\t\t{\n\t\t\t\t\t\t(moviesList = movies.map(movie => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Grid key={movie.imdbID} className='movie' item>\n\t\t\t\t\t\t\t\t\t<Paper elevation={5}>\n\t\t\t\t\t\t\t\t\t\t<a onClick={() => handleClick(movie.imdbID)}>\n\t\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={movie.Poster}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName='moviePoster'\n\t\t\t\t\t\t\t\t\t\t\t\talt='Movie poster'\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<p className='movieTitle'>\n\t\t\t\t\t\t\t\t\t\t\t\t{movie.Title} ({movie.Year})\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}))\n\t\t\t\t\t}\n\t\t\t\t\t;\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Grid>;\n\t}\n\n\tif (movies) {\n\t\t// User has not submitted the form, we are diplaying the array results\n\t\tmoviesList = movies.map(movie => {\n\t\t\treturn (\n\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t<Grid container spacing={spacing}>\n\t\t\t\t\t\t\t<Grid key={movie.imdbID} className='movie' item>\n\t\t\t\t\t\t\t\t<Paper elevation={5}>\n\t\t\t\t\t\t\t\t\t<a onClick={() => handleClick(movie.imdbID)}>\n\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc={movie.Poster}\n\t\t\t\t\t\t\t\t\t\t\tclassName='moviePoster'\n\t\t\t\t\t\t\t\t\t\t\talt='Movie poster'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<p className='movieTitle'>\n\t\t\t\t\t\t\t\t\t\t\t{movie.Title} ({movie.Year})\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t);\n\t\t});\n\t} else {\n\t\t// User has submiited the form, we are displaying the best matched result\n\t\tmoviesList.push(searchresult.data);\n\t\tmoviesList = moviesList.map(movie => {\n\t\t\treturn (\n\t\t\t\t<div key={movie.imdbID} className='movie'>\n\t\t\t\t\t<a onClick={() => handleClick(movie.imdbID)}>\n\t\t\t\t\t\t<img src={movie.Poster} className='moviePoster' alt='Movie poster' />\n\t\t\t\t\t\t<p className='movieTitle'>\n\t\t\t\t\t\t\t{movie.Title} ({movie.Year})\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<p style={{ textAlign: 'center', textShadow: '4px 4px 9px black' }}>\n\t\t\t\tSearch Results...\n\t\t\t</p>\n\t\t\t{moviesList}\n\t\t</div>\n\t);\n};\n\nexport default SearchResult;\n"]},"metadata":{},"sourceType":"module"}