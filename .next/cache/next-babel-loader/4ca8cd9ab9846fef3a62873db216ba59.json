{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\n\nconst dictionary = ({\n  data\n}) => {\n  const {\n    0: searchWord,\n    1: setSearchWord\n  } = useState('');\n  const {\n    0: words,\n    1: setWords\n  } = useState([]);\n  const {\n    0: updateWords,\n    1: setUpdateWords\n  } = useState('');\n\n  const handleChange = async e => {\n    setSearchWord(e.target.value);\n  };\n\n  const router = useRouter();\n  const {\n    imdbID,\n    Title,\n    Year,\n    Poster,\n    Genre,\n    Director,\n    Actors,\n    Metascore,\n    imdbRating,\n    imdbVotes\n  } = data;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const searchForm = {\n      imdbID,\n      Title,\n      searchWord,\n      Year,\n      Poster,\n      Genre,\n      Director,\n      Actors,\n      Metascore,\n      imdbRating,\n      imdbVotes\n    };\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const body = JSON.stringify(searchForm);\n      const res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n      setSearchWord('');\n      const config2 = {\n        'Content-Type': 'application/json'\n      };\n      Axios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n        setWords(res);\n      });\n      alert(res.data);\n    } catch (err) {\n      if (err) throw err;\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    console.log(`1`);\n    const config = {\n      'Content-Type': 'application/json'\n    };\n    Axios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n      setWords(res);\n    });\n  }, []);\n  return __jsx(Fragment, null, __jsx(\"p\", null, \"Movie Title: \", data.Title), __jsx(\"form\", {\n    onSubmit: e => handleSubmit(e)\n  }, __jsx(\"label\", null, \"Search\"), __jsx(\"input\", {\n    type: \"text\",\n    value: searchWord,\n    onChange: e => handleChange(e)\n  })), __jsx(\"br\", null), __jsx(WordResults, {\n    words: words\n  }));\n};\n\ndictionary.getInitialProps = async ctx => {\n  if (ctx.query.movieId) {\n    const res = await fetch(`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`);\n    const data = await res.json();\n    return {\n      data\n    };\n  }\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/[movieId]/dict.js"],"names":["React","Fragment","useState","useEffect","Axios","fetch","useRouter","WordResults","dictionary","data","searchWord","setSearchWord","words","setWords","updateWords","setUpdateWords","handleChange","e","target","value","router","imdbID","Title","Year","Poster","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","handleSubmit","preventDefault","searchForm","config","headers","body","JSON","stringify","res","post","query","movieId","config2","get","then","alert","err","console","log","getInitialProps","ctx","process","env","OmdbKey","json"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\n\nconst dictionary = ({ data }) => {\n\tconst [searchWord, setSearchWord] = useState('');\n\tconst [words, setWords] = useState([]);\n\tconst [updateWords, setUpdateWords] = useState('');\n\n\tconst handleChange = async e => {\n\t\tsetSearchWord(e.target.value);\n\t};\n\tconst router = useRouter();\n\tconst {\n\t\timdbID,\n\t\tTitle,\n\t\tYear,\n\t\tPoster,\n\t\tGenre,\n\t\tDirector,\n\t\tActors,\n\t\tMetascore,\n\t\timdbRating,\n\t\timdbVotes,\n\t} = data;\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst searchForm = {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tsearchWord,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t};\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst body = JSON.stringify(searchForm);\n\t\t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n\t\t\tsetSearchWord('');\n\t\t\tconst config2 = {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t};\n\t\t\tAxios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n\t\t\t\tsetWords(res);\n\t\t\t});\n\t\t\talert(res.data);\n\t\t} catch (err) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tconsole.log(`1`);\n\t\tconst config = {\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n\t\t\tsetWords(res);\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<p>Movie Title: {data.Title}</p>\n\t\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t<label>Search</label>\n\t\t\t\t<input type='text' value={searchWord} onChange={e => handleChange(e)}></input>\n\t\t\t</form>\n\t\t\t<br />\n\t\t\t<WordResults words={words} />\n\t\t</Fragment>\n\t);\n};\n\ndictionary.getInitialProps = async ctx => {\n\tif (ctx.query.movieId) {\n\t\tconst res = await fetch(\n\t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t);\n\t\tconst data = await res.json();\n\t\treturn { data };\n\t}\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}