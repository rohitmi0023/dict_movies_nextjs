{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\n\nvar dictionary = function dictionary(_ref) {\n  var data = _ref.data;\n\n  var _useState = useState(''),\n      searchWord = _useState[0],\n      setSearchWord = _useState[1]; //   const [searchResult, setSearchResult] = useState(\"\");\n\n\n  var router = useRouter();\n\n  var handleChange = function handleChange(e) {\n    return _regeneratorRuntime.async(function handleChange$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSearchWord(e.target.value);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var imdbID = data.imdbID,\n      Title = data.Title,\n      Year = data.Year,\n      Released = data.Released,\n      Genre = data.Genre,\n      Director = data.Director,\n      Actors = data.Actors,\n      Metascore = data.Metascore,\n      imdbRating = data.imdbRating,\n      imdbVotes = data.imdbVotes;\n\n  var handleSubmit = function handleSubmit(e) {\n    var searchForm, config, body, res;\n    return _regeneratorRuntime.async(function handleSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            e.preventDefault();\n            searchForm = {\n              id: imdbID,\n              title: Title,\n              word: searchWord,\n              released_year: Year,\n              released: Released,\n              genre: Genre,\n              director: Director,\n              actors: Actors,\n              metascore: Metascore,\n              imdb_rating: imdbRating,\n              imdb_votes: imdbVotes\n            };\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            body = JSON.stringify(searchForm);\n            console.log(body);\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(Axios.post(\"/movies/\".concat(router.query.movieId, \"/dict\"), body, config));\n\n          case 7:\n            res = _context2.sent;\n            console.log(res);\n            console.log('Reached the end!!!');\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var movieId = router.query.movieId;\n  return __jsx(\"div\", null, console.log(data), __jsx(\"p\", null, \"Movie Title: \", data.Title), movieId, __jsx(\"form\", {\n    onSubmit: function onSubmit(e) {\n      return handleSubmit(e);\n    }\n  }, __jsx(\"label\", null, \"Search\"), __jsx(\"input\", {\n    type: \"text\",\n    value: searchWord,\n    onChange: function onChange(e) {\n      return handleChange(e);\n    }\n  })), __jsx(\"p\", null, \"Hello dictionary!!!\"));\n};\n\ndictionary.getInitialProps = function _callee(ctx) {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!ctx.query.movieId) {\n            _context3.next = 9;\n            break;\n          }\n\n          console.log(ctx.query.movieId);\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(fetch(\"http://www.omdbapi.com/?i=\".concat(ctx.query.movieId, \"&type=movie&apikey=\").concat(process.env.OmdbKey)));\n\n        case 4:\n          res = _context3.sent;\n          _context3.next = 7;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 7:\n          data = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            data: data\n          });\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/movies/[movieId]/dict.js"],"names":["React","Fragment","useState","useRouter","Axios","fetch","dictionary","data","searchWord","setSearchWord","router","handleChange","e","target","value","imdbID","Title","Year","Released","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","handleSubmit","preventDefault","searchForm","id","title","word","released_year","released","genre","director","actors","metascore","imdb_rating","imdb_votes","config","headers","body","JSON","stringify","console","log","post","query","movieId","res","getInitialProps","ctx","process","env","OmdbKey","json"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\n\nconst dictionary = ({ data }) => {\n\tconst [searchWord, setSearchWord] = useState('');\n\t//   const [searchResult, setSearchResult] = useState(\"\");\n\tconst router = useRouter();\n\tconst handleChange = async e => {\n\t\tsetSearchWord(e.target.value);\n\t};\n\n\tconst {\n\t\timdbID,\n\t\tTitle,\n\t\tYear,\n\t\tReleased,\n\t\tGenre,\n\t\tDirector,\n\t\tActors,\n\t\tMetascore,\n\t\timdbRating,\n\t\timdbVotes,\n\t} = data;\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst searchForm = {\n\t\t\tid: imdbID,\n\t\t\ttitle: Title,\n\t\t\tword: searchWord,\n\t\t\treleased_year: Year,\n\t\t\treleased: Released,\n\t\t\tgenre: Genre,\n\t\t\tdirector: Director,\n\t\t\tactors: Actors,\n\t\t\tmetascore: Metascore,\n\t\t\timdb_rating: imdbRating,\n\t\t\timdb_votes: imdbVotes,\n\t\t};\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t};\n\t\tconst body = JSON.stringify(searchForm);\n\t\tconsole.log(body);\n\t\tconst res = await Axios.post(`/movies/${router.query.movieId}/dict`, body, config);\n\t\tconsole.log(res);\n\t\tconsole.log('Reached the end!!!');\n\t};\n\tconst { movieId } = router.query;\n\treturn (\n\t\t<div>\n\t\t\t{console.log(data)}\n\t\t\t<p>Movie Title: {data.Title}</p>\n\t\t\t{movieId}\n\t\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t<label>Search</label>\n\t\t\t\t<input type='text' value={searchWord} onChange={e => handleChange(e)}></input>\n\t\t\t</form>\n\t\t\t<p>Hello dictionary!!!</p>\n\t\t</div>\n\t);\n};\n\ndictionary.getInitialProps = async ctx => {\n\tif (ctx.query.movieId) {\n\t\tconsole.log(ctx.query.movieId);\n\t\tconst res = await fetch(\n\t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t);\n\t\tconst data = await res.json();\n\t\treturn { data };\n\t}\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}