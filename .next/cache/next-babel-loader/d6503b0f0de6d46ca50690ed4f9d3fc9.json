{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport MovieInfo from '../../components/MovieInfo';\n\nvar dictionary = function dictionary() // { data }\n{\n  var _useState = useState(''),\n      searchWord = _useState[0],\n      setSearchWord = _useState[1];\n\n  var _useState2 = useState([]),\n      words = _useState2[0],\n      setWords = _useState2[1];\n\n  var handleChange = function handleChange(e) {\n    return _regeneratorRuntime.async(function handleChange$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSearchWord(e.target.value);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var router = useRouter();\n  var _data = data,\n      imdbID = _data.imdbID,\n      Title = _data.Title,\n      Year = _data.Year,\n      Poster = _data.Poster,\n      Genre = _data.Genre,\n      Director = _data.Director,\n      Actors = _data.Actors,\n      Metascore = _data.Metascore,\n      imdbRating = _data.imdbRating,\n      imdbVotes = _data.imdbVotes;\n\n  var handleSubmit = function handleSubmit(e) {\n    var searchForm, config, body, res, config2;\n    return _regeneratorRuntime.async(function handleSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            e.preventDefault();\n            searchForm = {\n              imdbID: imdbID,\n              Title: Title,\n              searchWord: searchWord,\n              Year: Year,\n              Poster: Poster,\n              Genre: Genre,\n              Director: Director,\n              Actors: Actors,\n              Metascore: Metascore,\n              imdbRating: imdbRating,\n              imdbVotes: imdbVotes\n            };\n            _context2.prev = 2;\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            body = JSON.stringify(searchForm);\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(Axios.post(\"/api/\".concat(router.query.movieId, \"/dict\"), body, config));\n\n          case 7:\n            res = _context2.sent;\n            setSearchWord('');\n            config2 = {\n              'Content-Type': 'application/json'\n            };\n            Axios.get(\"/api/\".concat(router.query.movieId, \"/dict\"), config2).then(function (res) {\n              setWords(res);\n            });\n            alert(res.data);\n            _context2.next = 19;\n            break;\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](2);\n\n            if (!_context2.t0) {\n              _context2.next = 18;\n              break;\n            }\n\n            throw _context2.t0;\n\n          case 18:\n            console.log(_context2.t0);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[2, 14]], Promise);\n  };\n\n  useEffect(function () {\n    var config = {\n      'Content-Type': 'application/json'\n    };\n    Axios.get(\"/api/\".concat(router.query.movieId, \"/dict\"), config).then(function (res) {\n      setWords(res);\n    });\n  }, []);\n  return __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(Head, null, __jsx(\"title\", null, \"Next App\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\",\n    integrity: \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n  })), __jsx(MovieInfo, {\n    movieId: router.query.movieId\n  }), __jsx(Form, {\n    onSubmit: function onSubmit(e) {\n      return handleSubmit(e);\n    }\n  }, __jsx(FormGroup, null, __jsx(Label, null, \"Search\"), __jsx(Input, {\n    type: \"text\",\n    value: searchWord,\n    className: \"form-control\",\n    onChange: function onChange(e) {\n      return handleChange(e);\n    },\n    placeholder: \"Enter the word\"\n  })), __jsx(Button, {\n    type: \"submit\",\n    className: \"btn btn-primary\"\n  }, \"Submit\")), __jsx(\"br\", null), __jsx(WordResults, {\n    words: words\n  }));\n}; // dictionary.getInitialProps = async ctx => {\n// \tif (ctx.query.movieId) {\n// \t\tconst res = await fetch(\n// \t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n// \t\t);\n// \t\tconst data = await res.json();\n// \t\treturn { data };\n// \t}\n// };\n\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/[movieId]/dict.js"],"names":["React","Fragment","useState","useEffect","Head","Axios","fetch","useRouter","WordResults","Button","Form","FormGroup","Label","Input","MovieInfo","dictionary","searchWord","setSearchWord","words","setWords","handleChange","e","target","value","router","data","imdbID","Title","Year","Poster","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","handleSubmit","preventDefault","searchForm","config","headers","body","JSON","stringify","post","query","movieId","res","config2","get","then","alert","console","log"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport MovieInfo from '../../components/MovieInfo';\n\nconst dictionary = () =>\n\t// { data }\n\t{\n\t\tconst [searchWord, setSearchWord] = useState('');\n\t\tconst [words, setWords] = useState([]);\n\n\t\tconst handleChange = async e => {\n\t\t\tsetSearchWord(e.target.value);\n\t\t};\n\t\tconst router = useRouter();\n\t\tconst {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t} = data;\n\n\t\tconst handleSubmit = async e => {\n\t\t\te.preventDefault();\n\t\t\tconst searchForm = {\n\t\t\t\timdbID,\n\t\t\t\tTitle,\n\t\t\t\tsearchWord,\n\t\t\t\tYear,\n\t\t\t\tPoster,\n\t\t\t\tGenre,\n\t\t\t\tDirector,\n\t\t\t\tActors,\n\t\t\t\tMetascore,\n\t\t\t\timdbRating,\n\t\t\t\timdbVotes,\n\t\t\t};\n\t\t\ttry {\n\t\t\t\tconst config = {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tconst body = JSON.stringify(searchForm);\n\t\t\t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n\t\t\t\tsetSearchWord('');\n\t\t\t\tconst config2 = {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t};\n\t\t\t\tAxios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n\t\t\t\t\tsetWords(res);\n\t\t\t\t});\n\t\t\t\talert(res.data);\n\t\t\t} catch (err) {\n\t\t\t\tif (err) throw err;\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t};\n\n\t\tuseEffect(() => {\n\t\t\tconst config = {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t};\n\t\t\tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n\t\t\t\tsetWords(res);\n\t\t\t});\n\t\t}, []);\n\n\t\treturn (\n\t\t\t<div className='container'>\n\t\t\t\t<Head>\n\t\t\t\t\t<title>Next App</title>\n\t\t\t\t\t<link\n\t\t\t\t\t\trel='stylesheet'\n\t\t\t\t\t\thref='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css'\n\t\t\t\t\t\tintegrity='sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm'\n\t\t\t\t\t/>\n\t\t\t\t</Head>\n\t\t\t\t<MovieInfo movieId={router.query.movieId} />\n\t\t\t\t{/* <p>Movie Title: {data.Title}</p> */}\n\t\t\t\t<Form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t<Label>Search</Label>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tvalue={searchWord}\n\t\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\t\tonChange={e => handleChange(e)}\n\t\t\t\t\t\t\tplaceholder='Enter the word'\n\t\t\t\t\t\t></Input>\n\t\t\t\t\t</FormGroup>\n\t\t\t\t\t<Button type='submit' className='btn btn-primary'>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</Button>\n\t\t\t\t</Form>\n\t\t\t\t<br />\n\t\t\t\t<WordResults words={words} />\n\t\t\t</div>\n\t\t);\n\t};\n\n// dictionary.getInitialProps = async ctx => {\n// \tif (ctx.query.movieId) {\n// \t\tconst res = await fetch(\n// \t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n// \t\t);\n// \t\tconst data = await res.json();\n// \t\treturn { data };\n// \t}\n// };\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}