{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport { useEffect, Fragment, useContext } from 'react';\nimport Link from 'next/link';\n\nvar Movies = function Movies() {\n  var _useContext = useContext(''),\n      currentMovie = _useContext[0],\n      setCurrentMovie = _useContext[1];\n\n  var router = useRouter();\n  var movieId = router.query.movieId;\n\n  var fetchData = function fetchData() {\n    var res;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios(\"http://www.omdbapi.com/?i=\".concat(movieId, \"&type=movie&apikey=\").concat(process.env.OmdbKey)));\n\n          case 2:\n            res = _context.sent;\n            setCurrentMovie(res.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n  var rating = currentMovie.Ratings;\n\n  if (rating) {\n    rating = rating.map(function (each) {\n      return __jsx(\"div\", null, __jsx(\"p\", null, each.Source, \": \", each.Value));\n    });\n  }\n\n  return __jsx(Fragment, null, console.log(currentMovie), __jsx(Link, {\n    href: \"/movies/[movieId]/dict\",\n    as: \"/movies/\".concat(movieId, \"/dict\")\n  }, __jsx(\"a\", null, \"Go to it's dictionary\")), currentMovie ? __jsx(\"div\", null, __jsx(\"p\", null, \"Movie Name: \", currentMovie.Title), __jsx(\"p\", null, \"Released on : \", currentMovie.Released), __jsx(\"img\", {\n    src: currentMovie.Poster,\n    alt: \"Movie poster\"\n  }), __jsx(\"p\", null, \"Directed by: \", currentMovie.Director), __jsx(\"p\", null, \"Genre: \", currentMovie.Genre), __jsx(\"span\", null, rating)) : __jsx(\"p\", null, \"Loading...\"));\n};\n\nexport default Movies;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/movies/[movieId].js"],"names":["axios","useRouter","useEffect","Fragment","useContext","Link","Movies","currentMovie","setCurrentMovie","router","movieId","query","fetchData","process","env","OmdbKey","res","data","rating","Ratings","map","each","Source","Value","console","log","Title","Released","Poster","Director","Genre"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA,oBACoBF,UAAU,CAAC,EAAD,CAD9B;AAAA,MACbG,YADa;AAAA,MACCC,eADD;;AAEpB,MAAMC,MAAM,GAAGR,SAAS,EAAxB;AAFoB,MAGZS,OAHY,GAGAD,MAAM,CAACE,KAHP,CAGZD,OAHY;;AAIpB,MAAME,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACCZ,KAAK,qCACOU,OADP,gCACoCG,OAAO,CAACC,GAAR,CAAYC,OADhD,EADN;;AAAA;AACXC,YAAAA,GADW;AAIjBR,YAAAA,eAAe,CAACQ,GAAG,CAACC,IAAL,CAAf;;AAJiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAMAf,EAAAA,SAAS,CAAC,YAAM;AACfU,IAAAA,SAAS;AACT,GAFQ,EAEN,EAFM,CAAT;AAGA,MAAIM,MAAM,GAAGX,YAAY,CAACY,OAA1B;;AACA,MAAID,MAAJ,EAAY;AACXA,IAAAA,MAAM,GAAGA,MAAM,CAACE,GAAP,CAAW,UAAAC,IAAI,EAAI;AAC3B,aACC,mBACC,iBACEA,IAAI,CAACC,MADP,QACiBD,IAAI,CAACE,KADtB,CADD,CADD;AAOA,KARQ,CAAT;AASA;;AACD,SACC,MAAC,QAAD,QACEC,OAAO,CAACC,GAAR,CAAYlB,YAAZ,CADF,EAEC,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,wBAAX;AAAoC,IAAA,EAAE,oBAAaG,OAAb;AAAtC,KACC,yCADD,CAFD,EAKEH,YAAY,GACZ,mBACC,iCAAgBA,YAAY,CAACmB,KAA7B,CADD,EAEC,mCAAkBnB,YAAY,CAACoB,QAA/B,CAFD,EAGC;AAAK,IAAA,GAAG,EAAEpB,YAAY,CAACqB,MAAvB;AAA+B,IAAA,GAAG,EAAC;AAAnC,IAHD,EAIC,kCAAiBrB,YAAY,CAACsB,QAA9B,CAJD,EAKC,4BAAWtB,YAAY,CAACuB,KAAxB,CALD,EAMC,oBAAOZ,MAAP,CAND,CADY,GAUZ,8BAfF,CADD;AAoBA,CA7CD;;AA+CA,eAAeZ,MAAf","sourcesContent":["import axios from 'axios';\nimport { useRouter } from 'next/router';\nimport { useEffect, Fragment, useContext } from 'react';\nimport Link from 'next/link';\n\nconst Movies = () => {\n\tconst [currentMovie, setCurrentMovie] = useContext('');\n\tconst router = useRouter();\n\tconst { movieId } = router.query;\n\tconst fetchData = async () => {\n\t\tconst res = await axios(\n\t\t\t`http://www.omdbapi.com/?i=${movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t);\n\t\tsetCurrentMovie(res.data);\n\t};\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, []);\n\tlet rating = currentMovie.Ratings;\n\tif (rating) {\n\t\trating = rating.map(each => {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{each.Source}: {each.Value}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\t}\n\treturn (\n\t\t<Fragment>\n\t\t\t{console.log(currentMovie)}\n\t\t\t<Link href='/movies/[movieId]/dict' as={`/movies/${movieId}/dict`}>\n\t\t\t\t<a>Go to it's dictionary</a>\n\t\t\t</Link>\n\t\t\t{currentMovie ? (\n\t\t\t\t<div>\n\t\t\t\t\t<p>Movie Name: {currentMovie.Title}</p>\n\t\t\t\t\t<p>Released on : {currentMovie.Released}</p>\n\t\t\t\t\t<img src={currentMovie.Poster} alt='Movie poster'></img>\n\t\t\t\t\t<p>Directed by: {currentMovie.Director}</p>\n\t\t\t\t\t<p>Genre: {currentMovie.Genre}</p>\n\t\t\t\t\t<span>{rating}</span>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<p>Loading...</p>\n\t\t\t)}\n\t\t</Fragment>\n\t);\n};\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}