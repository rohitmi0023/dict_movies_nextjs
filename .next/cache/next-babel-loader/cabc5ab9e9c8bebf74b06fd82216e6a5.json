{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState, Fragment } from 'react';\nimport Link from 'next/link';\n\nvar Movies = function Movies() {\n  var _useState = useState(''),\n      currentMovie = _useState[0],\n      setCurrentMovie = _useState[1];\n\n  var router = useRouter();\n  var movieId = router.query.movieId;\n\n  var fetchData = function fetchData() {\n    var res;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios(\"http://www.omdbapi.com/?i=\".concat(movieId, \"&type=movie&apikey=9bc37d14\")));\n\n          case 2:\n            res = _context.sent;\n            setCurrentMovie(res.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n  var rating = currentMovie.Ratings;\n\n  if (rating) {\n    rating = rating.map(function (each) {\n      return __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }\n      }, __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }\n      }, each.Source, \": \", each.Value));\n    });\n  }\n\n  return __jsx(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, __jsx(Link, {\n    href: \"/dict\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \"Go to it's dictionary\"), currentMovie ? __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 29\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, \"Movie Name: \", currentMovie.Title), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, \"Released on : \", currentMovie.Released), __jsx(\"img\", {\n    src: currentMovie.Poster,\n    alt: \"Movie poster\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }, \"Directed by: \", currentMovie.Director), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }, \"Genre: \", currentMovie.Genre), __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, rating)) : __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 22\n    }\n  }, \"Loading...\"));\n};\n\nexport default Movies;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js"],"names":["axios","useRouter","useEffect","useState","Fragment","Link","Movies","currentMovie","setCurrentMovie","router","movieId","query","fetchData","res","data","rating","Ratings","map","each","Source","Value","Title","Released","Poster","Director","Genre"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA,kBACuBH,QAAQ,CAAC,EAAD,CAD/B;AAAA,MACVI,YADU;AAAA,MACIC,eADJ;;AAEjB,MAAMC,MAAM,GAAGR,SAAS,EAAxB;AAFiB,MAGTS,OAHS,GAGGD,MAAM,CAACE,KAHV,CAGTD,OAHS;;AAIjB,MAAME,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACIZ,KAAK,qCAA8BU,OAA9B,iCADT;;AAAA;AACRG,YAAAA,GADQ;AAEdL,YAAAA,eAAe,CAACK,GAAG,CAACC,IAAL,CAAf;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAIAZ,EAAAA,SAAS,CAAC,YAAM;AACZU,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;AAGA,MAAIG,MAAM,GAAGR,YAAY,CAACS,OAA1B;;AACA,MAAID,MAAJ,EAAY;AACRA,IAAAA,MAAM,GAAGA,MAAM,CAACE,GAAP,CAAW,UAACC,IAAD,EAAU;AAC1B,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,IAAI,CAACC,MAAT,QAAmBD,IAAI,CAACE,KAAxB,CADJ,CADJ;AAKH,KANQ,CAAT;AAOH;;AACD,SACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,EAEKb,YAAY,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAgBA,YAAY,CAACc,KAA7B,CADY,EAEZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkBd,YAAY,CAACe,QAA/B,CAFY,EAGZ;AAAK,IAAA,GAAG,EAAEf,YAAY,CAACgB,MAAvB;AAA+B,IAAA,GAAG,EAAC,cAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHY,EAIZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAiBhB,YAAY,CAACiB,QAA9B,CAJY,EAKZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWjB,YAAY,CAACkB,KAAxB,CALY,EAMZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOV,MAAP,CANY,CAAH,GAOJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATb,CADJ;AAaH,CAlCD;;AAoCA,eAAeT,MAAf","sourcesContent":["import axios from 'axios'\nimport { useRouter } from 'next/router'\nimport { useEffect, useState, Fragment } from 'react'\nimport Link from 'next/link'\n\nconst Movies = () => {\n    const [currentMovie, setCurrentMovie] = useState('')\n    const router = useRouter()\n    const { movieId } = router.query\n    const fetchData = async () => {\n        const res = await axios(`http://www.omdbapi.com/?i=${movieId}&type=movie&apikey=9bc37d14`)\n        setCurrentMovie(res.data)\n    }\n    useEffect(() => {\n        fetchData()\n    }, [])\n    let rating = currentMovie.Ratings\n    if (rating) {\n        rating = rating.map((each) => {\n            return (\n                <div>\n                    <p>{each.Source}: {each.Value}</p>\n                </div>\n            )\n        })\n    }\n    return (\n        <Fragment>\n            <Link href='/dict'>Go to it's dictionary</Link>\n            {currentMovie ? < div >\n                <p>Movie Name: {currentMovie.Title}</p>\n                <p>Released on : {currentMovie.Released}</p>\n                <img src={currentMovie.Poster} alt='Movie poster'></img>\n                <p>Directed by: {currentMovie.Director}</p>\n                <p>Genre: {currentMovie.Genre}</p>\n                <span>{rating}</span>\n            </div> : <p>Loading...</p>}\n        </Fragment>\n    )\n}\n\nexport default Movies\n"]},"metadata":{},"sourceType":"module"}