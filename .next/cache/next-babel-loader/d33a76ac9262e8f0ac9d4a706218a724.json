{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport { useRouter } from 'next/router';\n\nconst WordResults = ({\n  words\n}) => {\n  // const [words, setWords] = useState([]);\n  const router = useRouter(); // useEffect(() => {\n  // \tconst config = {\n  // \t\t'Content-Type': 'application/json',\n  // \t};\n  // \tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n  // \t\tsetWords(res);\n  // \t});\n  // }, [words]);\n\n  return __jsx(\"div\", null, words.data ? words.data.length ? __jsx(\"div\", null, words.data.map(each => {\n    return __jsx(\"span\", {\n      key: each.id\n    }, each.word, \" \", '  ', \"upvote \", '  ', \" downvote\", '  ');\n  })) : __jsx(\"p\", null, \"Nothing found!!!\") : __jsx(\"p\", null, \"Loading...\"));\n};\n\nexport default WordResults;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/components/WordResults.js"],"names":["React","useState","useEffect","Axios","useRouter","WordResults","words","router","data","length","map","each","id","word"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAClC;AACA,QAAMC,MAAM,GAAGH,SAAS,EAAxB,CAFkC,CAIlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACC,mBACEE,KAAK,CAACE,IAAN,GACAF,KAAK,CAACE,IAAN,CAAWC,MAAX,GACC,mBACEH,KAAK,CAACE,IAAN,CAAWE,GAAX,CAAeC,IAAI,IAAI;AACvB,WACC;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACC;AAAhB,OACED,IAAI,CAACE,IADP,OACc,IADd,aAES,IAFT,eAGE,IAHF,CADD;AAOA,GARA,CADF,CADD,GAaC,oCAdD,GAiBA,8BAlBF,CADD;AAuBA,CApCD;;AAsCA,eAAeR,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport { useRouter } from 'next/router';\n\nconst WordResults = ({ words }) => {\n\t// const [words, setWords] = useState([]);\n\tconst router = useRouter();\n\n\t// useEffect(() => {\n\t// \tconst config = {\n\t// \t\t'Content-Type': 'application/json',\n\t// \t};\n\t// \tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n\t// \t\tsetWords(res);\n\t// \t});\n\t// }, [words]);\n\n\treturn (\n\t\t<div>\n\t\t\t{words.data ? (\n\t\t\t\twords.data.length ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{words.data.map(each => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<span key={each.id}>\n\t\t\t\t\t\t\t\t\t{each.word} {'  '}\n\t\t\t\t\t\t\t\t\tupvote {'  '} downvote\n\t\t\t\t\t\t\t\t\t{'  '}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<p>Nothing found!!!</p>\n\t\t\t\t)\n\t\t\t) : (\n\t\t\t\t<p>Loading...</p>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default WordResults;\n"]},"metadata":{},"sourceType":"module"}