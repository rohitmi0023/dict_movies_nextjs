{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport NavBar from '../../components/NavBar';\nimport { Container, Button, TextField } from '@material-ui/core';\n\nconst dictionary = ({\n  data\n}) => {\n  const {\n    0: searchWord,\n    1: setSearchWord\n  } = useState('');\n  const {\n    0: words,\n    1: setWords\n  } = useState([]);\n  const {\n    0: matchedWords,\n    1: setMatchedWords\n  } = useState([]);\n  const {\n    0: wordErrors,\n    1: setWordErrors\n  } = useState();\n  const {\n    0: file,\n    1: setFile\n  } = useState(false);\n\n  const handleChange = async e => {\n    setWordErrors('');\n    setSearchWord(e.target.value);\n  };\n\n  const router = useRouter();\n  const {\n    imdbID,\n    Title,\n    Year,\n    Poster,\n    Genre,\n    Director,\n    Actors,\n    Metascore,\n    imdbRating,\n    imdbVotes\n  } = data;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const searchForm = {\n      imdbID,\n      Title,\n      searchWord,\n      Year,\n      Poster,\n      Genre,\n      Director,\n      Actors,\n      Metascore,\n      imdbRating,\n      imdbVotes\n    }; // For new word submission\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const body = JSON.stringify(searchForm);\n      const res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n      alert(res.data);\n      setSearchWord('');\n    } catch (err) {\n      if (err.response) {\n        setWordErrors(err.response.data.errors[0].msg);\n      }\n    } // for fetching all the words including the recent one just after submission\n\n\n    try {\n      const config2 = {\n        'Content-Type': 'application/json'\n      };\n      Axios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n        setWords(res);\n      });\n    } catch (error) {\n      if (error) throw error;\n    }\n  };\n\n  useEffect(() => {\n    // Fetching all the words on the initial render of the page\n    const config = {\n      'Content-Type': 'application/json'\n    };\n    Axios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n      setWords(res);\n    }); // checcking for whether the subtitle for it is already there or not\n\n    const config2 = {\n      'Content-Type': 'application/json'\n    };\n    Axios.get(`/api/${router.query.movieId}/subtitles`, config2).then(res => {\n      setFile(res.data);\n    });\n  }, []); //To display the matched words with the subtitles\n\n  const handleSearch = async e => {\n    if (!words.data.length) {\n      alert(`No word is added yet!`);\n    } else {\n      const res = await Axios.get(`/api/${data.imdbID}/dict/matched`);\n      setMatchedWords([]);\n      words.data.map(item => {\n        if (!(res.data.search(item.word) === -1)) {\n          setMatchedWords(prevArray => [...prevArray, item]);\n        }\n      });\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, \"Movies Words\")), __jsx(NavBar, null), __jsx(\"p\", {\n    className: \"currentMovieTitle\"\n  }, data.Title), __jsx(Container, null, __jsx(\"form\", {\n    method: \"POST\",\n    action: `/api/${data.imdbID}/subtitles`,\n    enctype: \"multipart/form-data\",\n    className: \"formStyle\"\n  }, __jsx(\"input\", {\n    style: {\n      fontSize: '17px',\n      width: '225px'\n    },\n    type: \"file\",\n    name: \"profile\",\n    placeholder: \"Upload it's subtitles\"\n  }), __jsx(\"button\", {\n    style: {\n      fontSize: '17px'\n    }\n  }, \"Upload subtitle\")), __jsx(\"br\", null), file ? __jsx(\"span\", {\n    style: {\n      float: 'right',\n      position: 'relative'\n    }\n  }, __jsx(\"span\", null, \"Subtitles Found!\"), __jsx(\"br\", null), __jsx(Button, {\n    variant: \"contained\",\n    onClick: e => handleSearch(e),\n    style: {\n      margin: '10px 25px'\n    }\n  }, \"Search\")) : null, __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"form\", {\n    onSubmit: e => handleSubmit(e)\n  }, __jsx(TextField, {\n    error: Boolean(wordErrors),\n    value: searchWord,\n    label: wordErrors ? 'Error' : 'Add a word',\n    helperText: wordErrors,\n    onChange: e => handleChange(e),\n    placeholder: \"Enter the word\"\n  })), __jsx(\"br\", null), matchedWords.length > 0 && __jsx(\"div\", {\n    style: {\n      display: 'inlineFlow'\n    }\n  }, __jsx(\"p\", {\n    style: {\n      textAlign: 'center',\n      fontSize: '18px'\n    }\n  }, \"Matched words...\"), matchedWords.map(each => {\n    return __jsx(\"div\", {\n      className: \"matchedWords\"\n    }, each.word);\n  })), __jsx(\"br\", null), __jsx(WordResults, {\n    words: words\n  })));\n};\n\ndictionary.getInitialProps = async ctx => {\n  if (ctx.query.movieId) {\n    const res = await fetch(`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`);\n    const data = await res.json();\n    return {\n      data\n    };\n  }\n};\n\nexport default dictionary;","map":null,"metadata":{},"sourceType":"module"}