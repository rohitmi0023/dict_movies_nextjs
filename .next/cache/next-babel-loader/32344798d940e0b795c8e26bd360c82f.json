{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport ExposurePlus1TwoToneIcon from '@material-ui/icons/ExposurePlus1TwoTone';\nimport ExposureNeg1TwoToneIcon from '@material-ui/icons/ExposureNeg1TwoTone';\nimport Axios from 'axios';\n\nconst WordResults = ({\n  words\n}) => {\n  useEffect(() => {\n    console.log(words);\n  }, [words]);\n\n  const handleClick = async (word_id, vote) => {\n    const value = localStorage.getItem('user');\n\n    if (value) {\n      localStorage.clear();\n      const word_id_var = {\n        word_id: `${word_id}`,\n        vote: `${vote}`\n      };\n      const body = JSON.stringify(word_id_var);\n      console.log(body);\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const res = await Axios.post(`/api/:id/dict/${word_id}`, body, config);\n      alert(res.data);\n    } else {\n      alert('You can vote just once per session!!!');\n    }\n  };\n\n  let wordList;\n\n  if (words.data) {\n    wordList = words.data.map(each => {\n      return __jsx(\"span\", {\n        key: each.id\n      }, each.word, \" \", '   ', __jsx(ExposurePlus1TwoToneIcon, {\n        onClick: () => handleClick(each.id, +1)\n      }), ' ', each.upvotes, ' ', __jsx(ExposureNeg1TwoToneIcon, {\n        onClick: () => handleClick(each.id, -1)\n      }), '   ');\n    });\n  }\n\n  return __jsx(\"div\", null, words.length + 1 ? __jsx(\"p\", null, \"Loading!!!\") : words.data.length ? __jsx(\"div\", null, wordList) : __jsx(\"p\", null, \"Nothing Found\"));\n};\n\nexport default WordResults;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/components/WordResults.js"],"names":["React","useEffect","ExposurePlus1TwoToneIcon","ExposureNeg1TwoToneIcon","Axios","WordResults","words","console","log","handleClick","word_id","vote","value","localStorage","getItem","clear","word_id_var","body","JSON","stringify","config","headers","res","post","alert","data","wordList","map","each","id","word","upvotes","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,wBAAP,MAAqC,yCAArC;AACA,OAAOC,uBAAP,MAAoC,wCAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAClCL,EAAAA,SAAS,CAAC,MAAM;AACfM,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;;AAGA,QAAMG,WAAW,GAAG,OAAOC,OAAP,EAAgBC,IAAhB,KAAyB;AAC5C,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAd;;AACA,QAAIF,KAAJ,EAAW;AACVC,MAAAA,YAAY,CAACE,KAAb;AACA,YAAMC,WAAW,GAAG;AACnBN,QAAAA,OAAO,EAAG,GAAEA,OAAQ,EADD;AAEnBC,QAAAA,IAAI,EAAG,GAAEA,IAAK;AAFK,OAApB;AAIA,YAAMM,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeH,WAAf,CAAb;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ;AACA,YAAMG,MAAM,GAAG;AACdC,QAAAA,OAAO,EAAE;AACR,0BAAgB;AADR;AADK,OAAf;AAKA,YAAMC,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAY,iBAAgBb,OAAQ,EAApC,EAAuCO,IAAvC,EAA6CG,MAA7C,CAAlB;AACAI,MAAAA,KAAK,CAACF,GAAG,CAACG,IAAL,CAAL;AACA,KAfD,MAeO;AACND,MAAAA,KAAK,CAAC,uCAAD,CAAL;AACA;AACD,GApBD;;AAqBA,MAAIE,QAAJ;;AACA,MAAIpB,KAAK,CAACmB,IAAV,EAAgB;AACfC,IAAAA,QAAQ,GAAGpB,KAAK,CAACmB,IAAN,CAAWE,GAAX,CAAeC,IAAI,IAAI;AACjC,aACC;AAAM,QAAA,GAAG,EAAEA,IAAI,CAACC;AAAhB,SACED,IAAI,CAACE,IADP,OACc,KADd,EAEC,MAAC,wBAAD;AAA0B,QAAA,OAAO,EAAE,MAAMrB,WAAW,CAACmB,IAAI,CAACC,EAAN,EAAU,CAAC,CAAX;AAApD,QAFD,EAEuE,GAFvE,EAGED,IAAI,CAACG,OAHP,EAGgB,GAHhB,EAIC,MAAC,uBAAD;AAAyB,QAAA,OAAO,EAAE,MAAMtB,WAAW,CAACmB,IAAI,CAACC,EAAN,EAAU,CAAC,CAAX;AAAnD,QAJD,EAKE,KALF,CADD;AASA,KAVU,CAAX;AAWA;;AAED,SACC,mBAcEvB,KAAK,CAAC0B,MAAN,GAAe,CAAf,GACA,8BADA,GAEG1B,KAAK,CAACmB,IAAN,CAAWO,MAAX,GACH,mBAAMN,QAAN,CADG,GAGH,iCAnBF,CADD;AAwBA,CAhED;;AAkEA,eAAerB,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport ExposurePlus1TwoToneIcon from '@material-ui/icons/ExposurePlus1TwoTone';\nimport ExposureNeg1TwoToneIcon from '@material-ui/icons/ExposureNeg1TwoTone';\nimport Axios from 'axios';\n\nconst WordResults = ({ words }) => {\n\tuseEffect(() => {\n\t\tconsole.log(words);\n\t}, [words]);\n\tconst handleClick = async (word_id, vote) => {\n\t\tconst value = localStorage.getItem('user');\n\t\tif (value) {\n\t\t\tlocalStorage.clear();\n\t\t\tconst word_id_var = {\n\t\t\t\tword_id: `${word_id}`,\n\t\t\t\tvote: `${vote}`,\n\t\t\t};\n\t\t\tconst body = JSON.stringify(word_id_var);\n\t\t\tconsole.log(body);\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst res = await Axios.post(`/api/:id/dict/${word_id}`, body, config);\n\t\t\talert(res.data);\n\t\t} else {\n\t\t\talert('You can vote just once per session!!!');\n\t\t}\n\t};\n\tlet wordList;\n\tif (words.data) {\n\t\twordList = words.data.map(each => {\n\t\t\treturn (\n\t\t\t\t<span key={each.id}>\n\t\t\t\t\t{each.word} {'   '}\n\t\t\t\t\t<ExposurePlus1TwoToneIcon onClick={() => handleClick(each.id, +1)} />{' '}\n\t\t\t\t\t{each.upvotes}{' '}\n\t\t\t\t\t<ExposureNeg1TwoToneIcon onClick={() => handleClick(each.id, -1)} />\n\t\t\t\t\t{'   '}\n\t\t\t\t</span>\n\t\t\t);\n\t\t});\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{/* {words.data ? (\n\t\t\t\twords.data.length ? (\n\t\t\t\t\t<div>{wordList}</div>\n\t\t\t\t) : (\n\t\t\t\t\t<p>Nothing found!!!</p>\n\t\t\t\t)\n\t\t\t) : (\n\t\t\t\t<div>\n\t\t\t\t\t{console.log(`Was loading!!`)}\n\t\t\t\t\t<p>Loading...</p>\n\t\t\t\t</div>\n\t\t\t)} */}\n\n\t\t\t{words.length + 1 ? (\n\t\t\t\t<p>Loading!!!</p>\n\t\t\t) : words.data.length ? (\n\t\t\t\t<div>{wordList}</div>\n\t\t\t) : (\n\t\t\t\t<p>Nothing Found</p>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default WordResults;\n"]},"metadata":{},"sourceType":"module"}