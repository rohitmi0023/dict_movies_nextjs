{"ast":null,"code":"var _jsxFileName = \"/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'node-fetch';\n\nconst movieId = ({\n  props\n}) => {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }\n  }, \"Helooo\"));\n}; // This function gets called at build time\n\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  // const res = await fetch('https://.../posts')\n  // const posts = await res.json()\n  // Get the paths we want to pre-render based on posts\n  const paths = [452, 535]; // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n} //getStaticProps so that you can fetch the data about the post with this id and use it to pre-render the page:\n\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  // const res = await fetch(`https://.../posts/${params.id}`)\n  // const post = await res.json()\n  // Pass post data to the page via props\n  return {\n    props: {\n      post: 1\n    }\n  };\n}\nexport default movieId;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js"],"names":["fetch","movieId","props","getStaticPaths","paths","fallback","getStaticProps","params","post"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,YAAlB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC3B,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ;AAKH,CAND,C,CAQA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACnC;AACA;AACA;AAEA;AACA,QAAMC,KAAK,GAAG,CAAC,GAAD,EAAM,GAAN,CAAd,CANmC,CAQnC;AACA;;AACA,SAAO;AAAEA,IAAAA,KAAF;AAASC,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACH,C,CAED;;AACA,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC7C;AACA;AACA;AACA;AAEA;AACA,SAAO;AAAEL,IAAAA,KAAK,EAAE;AAAEM,MAAAA,IAAI,EAAE;AAAR;AAAT,GAAP;AACH;AAGD,eAAeP,OAAf","sourcesContent":["import fetch from 'node-fetch'\n\nconst movieId = ({ props }) => {\n    return (\n        <div>\n            <p>Helooo</p>\n        </div>\n    )\n}\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n    // Call an external API endpoint to get posts\n    // const res = await fetch('https://.../posts')\n    // const posts = await res.json()\n\n    // Get the paths we want to pre-render based on posts\n    const paths = [452, 535]\n\n    // We'll pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false }\n}\n\n//getStaticProps so that you can fetch the data about the post with this id and use it to pre-render the page:\nexport async function getStaticProps({ params }) {\n    // params contains the post `id`.\n    // If the route is like /posts/1, then params.id is 1\n    // const res = await fetch(`https://.../posts/${params.id}`)\n    // const post = await res.json()\n\n    // Pass post data to the page via props\n    return { props: { post: 1 } }\n}\n\n\nexport default movieId"]},"metadata":{},"sourceType":"module"}