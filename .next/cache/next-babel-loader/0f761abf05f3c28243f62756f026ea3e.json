{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport ExposurePlus1TwoToneIcon from '@material-ui/icons/ExposurePlus1TwoTone';\nimport ExposureNeg1TwoToneIcon from '@material-ui/icons/ExposureNeg1TwoTone';\nimport Axios from 'axios';\nimport { Chip } from '@material-ui/core';\n\nvar WordResults = function WordResults(_ref) {\n  var words = _ref.words;\n\n  var handleClick = function handleClick(word_id, vote) {\n    var value, word_id_var, body, config, res;\n    return _regeneratorRuntime.async(function handleClick$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            value = localStorage.getItem('user');\n\n            if (!value) {\n              _context.next = 13;\n              break;\n            }\n\n            localStorage.clear();\n            word_id_var = {\n              word_id: \"\".concat(word_id),\n              vote: \"\".concat(vote)\n            };\n            body = JSON.stringify(word_id_var);\n            console.log(body);\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(Axios.post(\"/api/:id/dict/\".concat(word_id), body, config));\n\n          case 9:\n            res = _context.sent;\n            alert(res.data);\n            _context.next = 14;\n            break;\n\n          case 13:\n            alert('You can vote just once per session!!!');\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var wordList;\n\n  if (words.data) {\n    wordList = words.data.map(function (each) {\n      return __jsx(\"span\", {\n        key: each.id\n      }, __jsx(ExposurePlus1TwoToneIcon, {\n        onClick: function onClick() {\n          return handleClick(each.id, +1);\n        }\n      }), __jsx(Chip, {\n        label: \"\".concat(each.word, \"  \").concat(each.upvotes)\n      })) // <span key={each.id}>\n      // \t{each.word} {'   '}\n      // \t<ExposurePlus1TwoToneIcon onClick={() => handleClick(each.id, +1)} />{' '}\n      // \t{each.upvotes}{' '}\n      // \t<ExposureNeg1TwoToneIcon onClick={() => handleClick(each.id, -1)} />\n      // \t{'   '}\n      // </span>\n      ;\n    });\n  }\n\n  return __jsx(\"div\", null, words.length + 1 ? __jsx(\"p\", null, \"Loading!!!\") : words.data.length ? __jsx(\"div\", null, wordList) : __jsx(\"p\", null, \"Nothing Found\"));\n};\n\nexport default WordResults;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/components/WordResults.js"],"names":["React","useEffect","ExposurePlus1TwoToneIcon","ExposureNeg1TwoToneIcon","Axios","Chip","WordResults","words","handleClick","word_id","vote","value","localStorage","getItem","clear","word_id_var","body","JSON","stringify","console","log","config","headers","post","res","alert","data","wordList","map","each","id","word","upvotes","length"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,wBAAP,MAAqC,yCAArC;AACA,OAAOC,uBAAP,MAAoC,wCAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,mBAArB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAClC,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAOC,OAAP,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,KADa,GACLC,YAAY,CAACC,OAAb,CAAqB,MAArB,CADK;;AAAA,iBAEfF,KAFe;AAAA;AAAA;AAAA;;AAGlBC,YAAAA,YAAY,CAACE,KAAb;AACMC,YAAAA,WAJY,GAIE;AACnBN,cAAAA,OAAO,YAAKA,OAAL,CADY;AAEnBC,cAAAA,IAAI,YAAKA,IAAL;AAFe,aAJF;AAQZM,YAAAA,IARY,GAQLC,IAAI,CAACC,SAAL,CAAeH,WAAf,CARK;AASlBI,YAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACMK,YAAAA,MAVY,GAUH;AACdC,cAAAA,OAAO,EAAE;AACR,gCAAgB;AADR;AADK,aAVG;AAAA;AAAA,6CAeAlB,KAAK,CAACmB,IAAN,yBAA4Bd,OAA5B,GAAuCO,IAAvC,EAA6CK,MAA7C,CAfA;;AAAA;AAeZG,YAAAA,GAfY;AAgBlBC,YAAAA,KAAK,CAACD,GAAG,CAACE,IAAL,CAAL;AAhBkB;AAAA;;AAAA;AAkBlBD,YAAAA,KAAK,CAAC,uCAAD,CAAL;;AAlBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAqBA,MAAIE,QAAJ;;AACA,MAAIpB,KAAK,CAACmB,IAAV,EAAgB;AACfC,IAAAA,QAAQ,GAAGpB,KAAK,CAACmB,IAAN,CAAWE,GAAX,CAAe,UAAAC,IAAI,EAAI;AACjC,aACC;AAAM,QAAA,GAAG,EAAEA,IAAI,CAACC;AAAhB,SACC,MAAC,wBAAD;AAA0B,QAAA,OAAO,EAAE;AAAA,iBAAMtB,WAAW,CAACqB,IAAI,CAACC,EAAN,EAAU,CAAC,CAAX,CAAjB;AAAA;AAAnC,QADD,EAEC,MAAC,IAAD;AAAM,QAAA,KAAK,YAAKD,IAAI,CAACE,IAAV,eAAmBF,IAAI,CAACG,OAAxB;AAAX,QAFD,CADD,CAKC;AACA;AACA;AACA;AACA;AACA;AACA;AAXD;AAaA,KAdU,CAAX;AAeA;;AAED,SACC,mBACEzB,KAAK,CAAC0B,MAAN,GAAe,CAAf,GACA,8BADA,GAEG1B,KAAK,CAACmB,IAAN,CAAWO,MAAX,GACH,mBAAMN,QAAN,CADG,GAGH,iCANF,CADD;AAWA,CApDD;;AAsDA,eAAerB,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport ExposurePlus1TwoToneIcon from '@material-ui/icons/ExposurePlus1TwoTone';\nimport ExposureNeg1TwoToneIcon from '@material-ui/icons/ExposureNeg1TwoTone';\nimport Axios from 'axios';\nimport { Chip } from '@material-ui/core';\n\nconst WordResults = ({ words }) => {\n\tconst handleClick = async (word_id, vote) => {\n\t\tconst value = localStorage.getItem('user');\n\t\tif (value) {\n\t\t\tlocalStorage.clear();\n\t\t\tconst word_id_var = {\n\t\t\t\tword_id: `${word_id}`,\n\t\t\t\tvote: `${vote}`,\n\t\t\t};\n\t\t\tconst body = JSON.stringify(word_id_var);\n\t\t\tconsole.log(body);\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst res = await Axios.post(`/api/:id/dict/${word_id}`, body, config);\n\t\t\talert(res.data);\n\t\t} else {\n\t\t\talert('You can vote just once per session!!!');\n\t\t}\n\t};\n\tlet wordList;\n\tif (words.data) {\n\t\twordList = words.data.map(each => {\n\t\t\treturn (\n\t\t\t\t<span key={each.id}>\n\t\t\t\t\t<ExposurePlus1TwoToneIcon onClick={() => handleClick(each.id, +1)} />\n\t\t\t\t\t<Chip label={`${each.word}  ${each.upvotes}`} />\n\t\t\t\t</span>\n\t\t\t\t// <span key={each.id}>\n\t\t\t\t// \t{each.word} {'   '}\n\t\t\t\t// \t<ExposurePlus1TwoToneIcon onClick={() => handleClick(each.id, +1)} />{' '}\n\t\t\t\t// \t{each.upvotes}{' '}\n\t\t\t\t// \t<ExposureNeg1TwoToneIcon onClick={() => handleClick(each.id, -1)} />\n\t\t\t\t// \t{'   '}\n\t\t\t\t// </span>\n\t\t\t);\n\t\t});\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{words.length + 1 ? (\n\t\t\t\t<p>Loading!!!</p>\n\t\t\t) : words.data.length ? (\n\t\t\t\t<div>{wordList}</div>\n\t\t\t) : (\n\t\t\t\t<p>Nothing Found</p>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default WordResults;\n"]},"metadata":{},"sourceType":"module"}