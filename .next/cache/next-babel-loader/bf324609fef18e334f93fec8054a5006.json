{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\n\nvar Movies = function Movies() {\n  var router = useRouter();\n  var movieId = router.query.movieId;\n  console.log(movieId);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }, \"Helooo\"), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }, props.Title));\n}; // This function gets called at build time\n// export async function getStaticPaths() {\n// Call an external API endpoint to get posts\n// Get the paths we want to pre-render based on posts\n// const router = useRouter()\n// const { movieId } = router.query\n// let paths = []\n// paths = paths.push(movieId)\n// console.log(paths)\n// We'll pre-render only these paths at build time.\n// { fallback: false } means other routes should 404.\n// return { paths, fallback: false }\n// }\n//getStaticProps so that you can fetch the data about the post with this id and use it to pre-render the page:\n// export async function getStaticProps({ params }) {\n// params contains the post `id`.\n// If the route is like /posts/1, then params.id is 1\n// const res = await fetch(`https://.../posts/${params.id}`)\n// const post = await res.json()\n// const res = await axios(`http://www.omdbapi.com/?i=\"${params}\"&type=movie&apikey=9bc37d14`)\n// console.log(res)\n// Pass post data to the page via props\n// return { props: { res } }\n// }\n\n\nexport default Movies;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js"],"names":["axios","useRouter","Movies","router","movieId","query","console","log","props","Title"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACjB,MAAMC,MAAM,GAAGF,SAAS,EAAxB;AADiB,MAETG,OAFS,GAEGD,MAAM,CAACE,KAFV,CAETD,OAFS;AAGjBE,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAII,KAAK,CAACC,KAAV,CAFJ,CADJ;AAMH,CAVD,C,CAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAeP,MAAf","sourcesContent":["import axios from 'axios'\nimport { useRouter } from 'next/router'\n\nconst Movies = () => {\n    const router = useRouter()\n    const { movieId } = router.query\n    console.log(movieId)\n    return (\n        <div>\n            <p>Helooo</p>\n            <p>{props.Title}</p>\n        </div>\n    )\n}\n\n// This function gets called at build time\n// export async function getStaticPaths() {\n// Call an external API endpoint to get posts\n\n// Get the paths we want to pre-render based on posts\n// const router = useRouter()\n// const { movieId } = router.query\n// let paths = []\n// paths = paths.push(movieId)\n// console.log(paths)\n// We'll pre-render only these paths at build time.\n// { fallback: false } means other routes should 404.\n// return { paths, fallback: false }\n// }\n\n//getStaticProps so that you can fetch the data about the post with this id and use it to pre-render the page:\n// export async function getStaticProps({ params }) {\n// params contains the post `id`.\n// If the route is like /posts/1, then params.id is 1\n// const res = await fetch(`https://.../posts/${params.id}`)\n// const post = await res.json()\n// const res = await axios(`http://www.omdbapi.com/?i=\"${params}\"&type=movie&apikey=9bc37d14`)\n// console.log(res)\n// Pass post data to the page via props\n// return { props: { res } }\n// }\n\n\nexport default Movies"]},"metadata":{},"sourceType":"module"}