{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport NavBar from '../../components/NavBar';\nimport { Container, Button, TextField } from '@material-ui/core';\n\nconst dictionary = ({\n  query\n}) => {\n  const {\n    0: currentMovie,\n    1: setCurrentMovie\n  } = useState('');\n  const {\n    0: searchWord,\n    1: setSearchWord\n  } = useState('');\n  const {\n    0: words,\n    1: setWords\n  } = useState([]);\n  const {\n    0: matchedWords,\n    1: setMatchedWords\n  } = useState([]);\n  const {\n    0: wordErrors,\n    1: setWordErrors\n  } = useState();\n  const {\n    0: file,\n    1: setFile\n  } = useState(false);\n\n  const handleChange = async e => {\n    setWordErrors('');\n    setSearchWord(e.target.value);\n  };\n\n  const router = useRouter();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const {\n      imdbID,\n      Title,\n      Year,\n      Poster,\n      Genre,\n      Director,\n      Actors,\n      Metascore,\n      imdbRating,\n      imdbVotes\n    } = currentMovie;\n    const searchForm = {\n      imdbID,\n      Title,\n      searchWord,\n      Year,\n      Poster,\n      Genre,\n      Director,\n      Actors,\n      Metascore,\n      imdbRating,\n      imdbVotes\n    }; // For new word submission\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const body = JSON.stringify(searchForm);\n      const res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n      alert(res.data);\n      setSearchWord('');\n    } catch (err) {\n      if (err.response) {\n        setWordErrors(err.response.data.errors[0].msg);\n      }\n    } // for fetching all the words including the recent one just after submission\n\n\n    try {\n      const config2 = {\n        'Content-Type': 'application/json'\n      };\n      Axios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n        setWords(res);\n      });\n    } catch (error) {\n      if (error) throw error;\n    }\n  };\n\n  useEffect(() => {\n    // Fetching the current movie details\n    const config = {\n      'Content-Type': 'application/json'\n    };\n    console.log(query); // Axios.get(\n    // \t`https://www.omdbapi.com/?i=${router.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n    // ).then(res => {\n    // \tconsole.log(res);\n    // \tsetCurrentMovie(res.data);\n    // });\n    // Fetching all the words on the initial render of the page\n\n    Axios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n      setWords(res);\n    }); // checcking for whether the subtitle for it is already there or not\n\n    Axios.get(`/api/${router.query.movieId}/subtitles`, config).then(res => {\n      setFile(res.data);\n    });\n  }, []); //To display the matched words with the subtitles\n\n  const handleSearch = async e => {\n    if (!words.data.length) {\n      alert(`No word is added yet!`);\n    } else {\n      const res = await Axios.get(`/api/${data.imdbID}/dict/matched`);\n      setMatchedWords([]);\n      words.data.map(item => {\n        if (!(res.data.search(item.word) === -1)) {\n          setMatchedWords(prevArray => [...prevArray, item]);\n        }\n      });\n    }\n\n    if (!matchedWords.length) {\n      alert('Nothing matched!');\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, \"Movies Words\")), __jsx(NavBar, null), console.log(currentMovie), currentMovie ? __jsx(\"div\", null, currentMovie.Title) : __jsx(\"p\", null, \"Loading...\"));\n};\n\ndictionary.getInitialProps = ({\n  query\n}) => {\n  console.log(query);\n  return {\n    query\n  };\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/src/pages/[movieId]/dict.js"],"names":["useState","useEffect","Head","Axios","fetch","useRouter","WordResults","NavBar","Container","Button","TextField","dictionary","query","currentMovie","setCurrentMovie","searchWord","setSearchWord","words","setWords","matchedWords","setMatchedWords","wordErrors","setWordErrors","file","setFile","handleChange","e","target","value","router","handleSubmit","preventDefault","imdbID","Title","Year","Poster","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","searchForm","config","headers","body","JSON","stringify","res","post","movieId","alert","data","err","response","errors","msg","config2","get","then","error","console","log","handleSearch","length","map","item","search","word","prevArray","getInitialProps"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,SAA5B,QAA6C,mBAA7C;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACjC,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCd,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAA,OAACe,UAAD;AAAA,OAAaC;AAAb,MAA8BhB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACiB,KAAD;AAAA,OAAQC;AAAR,MAAoBlB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACmB,YAAD;AAAA,OAAeC;AAAf,MAAkCpB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAA,OAACqB,UAAD;AAAA,OAAaC;AAAb,MAA8BtB,QAAQ,EAA5C;AACA,QAAM;AAAA,OAACuB,IAAD;AAAA,OAAOC;AAAP,MAAkBxB,QAAQ,CAAC,KAAD,CAAhC;;AACA,QAAMyB,YAAY,GAAG,MAAMC,CAAN,IAAW;AAC/BJ,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAN,IAAAA,aAAa,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACA,GAHD;;AAKA,QAAMC,MAAM,GAAGxB,SAAS,EAAxB;;AAEA,QAAMyB,YAAY,GAAG,MAAMJ,CAAN,IAAW;AAC/BA,IAAAA,CAAC,CAACK,cAAF;AACA,UAAM;AACLC,MAAAA,MADK;AAELC,MAAAA,KAFK;AAGLC,MAAAA,IAHK;AAILC,MAAAA,MAJK;AAKLC,MAAAA,KALK;AAMLC,MAAAA,QANK;AAOLC,MAAAA,MAPK;AAQLC,MAAAA,SARK;AASLC,MAAAA,UATK;AAULC,MAAAA;AAVK,QAWF5B,YAXJ;AAYA,UAAM6B,UAAU,GAAG;AAClBV,MAAAA,MADkB;AAElBC,MAAAA,KAFkB;AAGlBlB,MAAAA,UAHkB;AAIlBmB,MAAAA,IAJkB;AAKlBC,MAAAA,MALkB;AAMlBC,MAAAA,KANkB;AAOlBC,MAAAA,QAPkB;AAQlBC,MAAAA,MARkB;AASlBC,MAAAA,SATkB;AAUlBC,MAAAA,UAVkB;AAWlBC,MAAAA;AAXkB,KAAnB,CAd+B,CA2B/B;;AACA,QAAI;AACH,YAAME,MAAM,GAAG;AACdC,QAAAA,OAAO,EAAE;AACR,0BAAgB;AADR;AADK,OAAf;AAKA,YAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeL,UAAf,CAAb;AACA,YAAMM,GAAG,GAAG,MAAM7C,KAAK,CAAC8C,IAAN,CAAY,QAAOpB,MAAM,CAACjB,KAAP,CAAasC,OAAQ,OAAxC,EAAgDL,IAAhD,EAAsDF,MAAtD,CAAlB;AACAQ,MAAAA,KAAK,CAACH,GAAG,CAACI,IAAL,CAAL;AACApC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACA,KAVD,CAUE,OAAOqC,GAAP,EAAY;AACb,UAAIA,GAAG,CAACC,QAAR,EAAkB;AACjBhC,QAAAA,aAAa,CAAC+B,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG,MAAlB,CAAyB,CAAzB,EAA4BC,GAA7B,CAAb;AACA;AACD,KA1C8B,CA2C/B;;;AACA,QAAI;AACH,YAAMC,OAAO,GAAG;AACf,wBAAgB;AADD,OAAhB;AAGAtD,MAAAA,KAAK,CAACuD,GAAN,CAAW,QAAO7B,MAAM,CAACjB,KAAP,CAAasC,OAAQ,OAAvC,EAA+CO,OAA/C,EAAwDE,IAAxD,CAA6DX,GAAG,IAAI;AACnE9B,QAAAA,QAAQ,CAAC8B,GAAD,CAAR;AACA,OAFD;AAGA,KAPD,CAOE,OAAOY,KAAP,EAAc;AACf,UAAIA,KAAJ,EAAW,MAAMA,KAAN;AACX;AACD,GAtDD;;AAwDA3D,EAAAA,SAAS,CAAC,MAAM;AACf;AACA,UAAM0C,MAAM,GAAG;AACd,sBAAgB;AADF,KAAf;AAGAkB,IAAAA,OAAO,CAACC,GAAR,CAAYlD,KAAZ,EALe,CAMf;AACA;AACA;AACA;AACA;AACA;AACA;;AACAT,IAAAA,KAAK,CAACuD,GAAN,CAAW,QAAO7B,MAAM,CAACjB,KAAP,CAAasC,OAAQ,OAAvC,EAA+CP,MAA/C,EAAuDgB,IAAvD,CAA4DX,GAAG,IAAI;AAClE9B,MAAAA,QAAQ,CAAC8B,GAAD,CAAR;AACA,KAFD,EAbe,CAgBf;;AACA7C,IAAAA,KAAK,CAACuD,GAAN,CAAW,QAAO7B,MAAM,CAACjB,KAAP,CAAasC,OAAQ,YAAvC,EAAoDP,MAApD,EAA4DgB,IAA5D,CAAiEX,GAAG,IAAI;AACvExB,MAAAA,OAAO,CAACwB,GAAG,CAACI,IAAL,CAAP;AACA,KAFD;AAGA,GApBQ,EAoBN,EApBM,CAAT,CAtEiC,CA4FjC;;AACA,QAAMW,YAAY,GAAG,MAAMrC,CAAN,IAAW;AAC/B,QAAI,CAACT,KAAK,CAACmC,IAAN,CAAWY,MAAhB,EAAwB;AACvBb,MAAAA,KAAK,CAAE,uBAAF,CAAL;AACA,KAFD,MAEO;AACN,YAAMH,GAAG,GAAG,MAAM7C,KAAK,CAACuD,GAAN,CAAW,QAAON,IAAI,CAACpB,MAAO,eAA9B,CAAlB;AACAZ,MAAAA,eAAe,CAAC,EAAD,CAAf;AACAH,MAAAA,KAAK,CAACmC,IAAN,CAAWa,GAAX,CAAeC,IAAI,IAAI;AACtB,YAAI,EAAElB,GAAG,CAACI,IAAJ,CAASe,MAAT,CAAgBD,IAAI,CAACE,IAArB,MAA+B,CAAC,CAAlC,CAAJ,EAA0C;AACzChD,UAAAA,eAAe,CAACiD,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAeH,IAAf,CAAd,CAAf;AACA;AACD,OAJD;AAKA;;AACD,QAAI,CAAC/C,YAAY,CAAC6C,MAAlB,EAA0B;AACzBb,MAAAA,KAAK,CAAC,kBAAD,CAAL;AACA;AACD,GAfD;;AAiBA,SACC,mBACC,MAAC,IAAD,QACC,oCADD,CADD,EAIC,MAAC,MAAD,OAJD,EAKEU,OAAO,CAACC,GAAR,CAAYjD,YAAZ,CALF,EAMEA,YAAY,GAAG,mBAAMA,YAAY,CAACoB,KAAnB,CAAH,GAAqC,8BANnD,CADD;AAgEA,CA9KD;;AAgLAtB,UAAU,CAAC2D,eAAX,GAA6B,CAAC;AAAE1D,EAAAA;AAAF,CAAD,KAAe;AAC3CiD,EAAAA,OAAO,CAACC,GAAR,CAAYlD,KAAZ;AACA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACA,CAHD;;AAKA,eAAeD,UAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport NavBar from '../../components/NavBar';\nimport { Container, Button, TextField } from '@material-ui/core';\n\nconst dictionary = ({ query }) => {\n\tconst [currentMovie, setCurrentMovie] = useState('');\n\tconst [searchWord, setSearchWord] = useState('');\n\tconst [words, setWords] = useState([]);\n\tconst [matchedWords, setMatchedWords] = useState([]);\n\tconst [wordErrors, setWordErrors] = useState();\n\tconst [file, setFile] = useState(false);\n\tconst handleChange = async e => {\n\t\tsetWordErrors('');\n\t\tsetSearchWord(e.target.value);\n\t};\n\n\tconst router = useRouter();\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t} = currentMovie;\n\t\tconst searchForm = {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tsearchWord,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t};\n\t\t// For new word submission\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst body = JSON.stringify(searchForm);\n\t\t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n\t\t\talert(res.data);\n\t\t\tsetSearchWord('');\n\t\t} catch (err) {\n\t\t\tif (err.response) {\n\t\t\t\tsetWordErrors(err.response.data.errors[0].msg);\n\t\t\t}\n\t\t}\n\t\t// for fetching all the words including the recent one just after submission\n\t\ttry {\n\t\t\tconst config2 = {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t};\n\t\t\tAxios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n\t\t\t\tsetWords(res);\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tif (error) throw error;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\t// Fetching the current movie details\n\t\tconst config = {\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tconsole.log(query);\n\t\t// Axios.get(\n\t\t// \t`https://www.omdbapi.com/?i=${router.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t// ).then(res => {\n\t\t// \tconsole.log(res);\n\t\t// \tsetCurrentMovie(res.data);\n\t\t// });\n\t\t// Fetching all the words on the initial render of the page\n\t\tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n\t\t\tsetWords(res);\n\t\t});\n\t\t// checcking for whether the subtitle for it is already there or not\n\t\tAxios.get(`/api/${router.query.movieId}/subtitles`, config).then(res => {\n\t\t\tsetFile(res.data);\n\t\t});\n\t}, []);\n\n\t//To display the matched words with the subtitles\n\tconst handleSearch = async e => {\n\t\tif (!words.data.length) {\n\t\t\talert(`No word is added yet!`);\n\t\t} else {\n\t\t\tconst res = await Axios.get(`/api/${data.imdbID}/dict/matched`);\n\t\t\tsetMatchedWords([]);\n\t\t\twords.data.map(item => {\n\t\t\t\tif (!(res.data.search(item.word) === -1)) {\n\t\t\t\t\tsetMatchedWords(prevArray => [...prevArray, item]);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!matchedWords.length) {\n\t\t\talert('Nothing matched!');\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Head>\n\t\t\t\t<title>Movies Words</title>\n\t\t\t</Head>\n\t\t\t<NavBar />\n\t\t\t{console.log(currentMovie)}\n\t\t\t{currentMovie ? <div>{currentMovie.Title}</div> : <p>Loading...</p>}\n\t\t\t{/* <p className='currentMovieTitle'>{data.Title}</p>\n\t\t\t<Container>\n\t\t\t\t<form\n\t\t\t\t\tmethod='POST'\n\t\t\t\t\taction={`/api/${data.imdbID}/subtitles`}\n\t\t\t\t\tenctype='multipart/form-data'\n\t\t\t\t\tclassName='formStyle'\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{ fontSize: '17px', width: '225px' }}\n\t\t\t\t\t\ttype='file'\n\t\t\t\t\t\tname='profile'\n\t\t\t\t\t\tplaceholder=\"Upload it's subtitles\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button style={{ fontSize: '17px' }}>Upload subtitle</button>\n\t\t\t\t</form>\n\t\t\t\t<br />\n\t\t\t\t{file ? (\n\t\t\t\t\t<span style={{ float: 'right', position: 'relative' }}>\n\t\t\t\t\t\t<span>Subtitles Found!</span>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\tonClick={e => handleSearch(e)}\n\t\t\t\t\t\t\tstyle={{ margin: '10px 25px' }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</span>\n\t\t\t\t) : null}\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\terror={Boolean(wordErrors)}\n\t\t\t\t\t\tvalue={searchWord}\n\t\t\t\t\t\tlabel={wordErrors ? 'Error' : 'Add a word'}\n\t\t\t\t\t\thelperText={wordErrors}\n\t\t\t\t\t\tonChange={e => handleChange(e)}\n\t\t\t\t\t\tplaceholder='Enter the word'\n\t\t\t\t\t></TextField>\n\t\t\t\t</form>\n\t\t\t\t<br />\n\t\t\t\t{matchedWords.length > 0 && (\n\t\t\t\t\t<div style={{ display: 'inlineFlow' }}>\n\t\t\t\t\t\t<p style={{ textAlign: 'center', fontSize: '18px' }}>Matched words...</p>\n\t\t\t\t\t\t{matchedWords.map(each => {\n\t\t\t\t\t\t\treturn <div className='matchedWords'>{each.word}</div>;\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<br />\n\t\t\t\t<WordResults words={words} />\n\t\t\t</Container> */}\n\t\t</div>\n\t);\n};\n\ndictionary.getInitialProps = ({ query }) => {\n\tconsole.log(query);\n\treturn { query };\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}