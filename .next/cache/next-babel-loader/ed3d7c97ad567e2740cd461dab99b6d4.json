{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport ExposurePlus1TwoToneIcon from '@material-ui/icons/ExposurePlus1TwoTone';\nimport ExposureNeg1TwoToneIcon from '@material-ui/icons/ExposureNeg1TwoTone';\nimport Axios from 'axios';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport { Chip } from '@material-ui/core';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\n\nvar WordResults = function WordResults(_ref) {\n  var words = _ref.words;\n\n  var handleClick = function handleClick(word_id, vote) {\n    var value, word_id_var, body, config, res;\n    return _regeneratorRuntime.async(function handleClick$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            value = localStorage.getItem('user');\n\n            if (!value) {\n              _context.next = 13;\n              break;\n            }\n\n            localStorage.clear();\n            word_id_var = {\n              word_id: \"\".concat(word_id),\n              vote: \"\".concat(vote)\n            };\n            body = JSON.stringify(word_id_var);\n            console.log(body);\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(Axios.post(\"/api/:id/dict/\".concat(word_id), body, config));\n\n          case 9:\n            res = _context.sent;\n            alert(res.data);\n            _context.next = 14;\n            break;\n\n          case 13:\n            alert('You can vote just once per session!!!');\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var wordList;\n\n  if (words.data) {\n    wordList = words.data.map(function (each) {\n      return __jsx(\"div\", {\n        key: each.id,\n        style: {\n          border: '2px solid black',\n          margin: '5px 5px',\n          fontWeight: '500',\n          fontStyle: 'italic',\n          padding: '10px 10px',\n          display: 'inline-block'\n        }\n      }, each.word, \" \", '   ', __jsx(ThumbUpIcon, {\n        onClick: function onClick() {\n          return handleClick(each.id, +1);\n        }\n      }), \" \", '  ', \" \", each.upvotes, ' ', __jsx(ThumbDownIcon, {\n        onClick: function onClick() {\n          return handleClick(each.id, -1);\n        }\n      }), ' ');\n    });\n  }\n\n  return __jsx(\"div\", null, words.length + 1 ? __jsx(\"p\", null, \"Loading!!!\") : words.data.length ? __jsx(\"div\", {\n    style: {\n      display: 'inlineFlow'\n    }\n  }, wordList) : __jsx(\"p\", null, \"Nothing Found\"));\n};\n\nexport default WordResults;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/components/WordResults.js"],"names":["React","useEffect","ExposurePlus1TwoToneIcon","ExposureNeg1TwoToneIcon","Axios","ThumbDownIcon","Chip","ThumbUpIcon","WordResults","words","handleClick","word_id","vote","value","localStorage","getItem","clear","word_id_var","body","JSON","stringify","console","log","config","headers","post","res","alert","data","wordList","map","each","id","border","margin","fontWeight","fontStyle","padding","display","word","upvotes","length"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,wBAAP,MAAqC,yCAArC;AACA,OAAOC,uBAAP,MAAoC,wCAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAClC,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAOC,OAAP,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,KADa,GACLC,YAAY,CAACC,OAAb,CAAqB,MAArB,CADK;;AAAA,iBAEfF,KAFe;AAAA;AAAA;AAAA;;AAGlBC,YAAAA,YAAY,CAACE,KAAb;AACMC,YAAAA,WAJY,GAIE;AACnBN,cAAAA,OAAO,YAAKA,OAAL,CADY;AAEnBC,cAAAA,IAAI,YAAKA,IAAL;AAFe,aAJF;AAQZM,YAAAA,IARY,GAQLC,IAAI,CAACC,SAAL,CAAeH,WAAf,CARK;AASlBI,YAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACMK,YAAAA,MAVY,GAUH;AACdC,cAAAA,OAAO,EAAE;AACR,gCAAgB;AADR;AADK,aAVG;AAAA;AAAA,6CAeApB,KAAK,CAACqB,IAAN,yBAA4Bd,OAA5B,GAAuCO,IAAvC,EAA6CK,MAA7C,CAfA;;AAAA;AAeZG,YAAAA,GAfY;AAgBlBC,YAAAA,KAAK,CAACD,GAAG,CAACE,IAAL,CAAL;AAhBkB;AAAA;;AAAA;AAkBlBD,YAAAA,KAAK,CAAC,uCAAD,CAAL;;AAlBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAqBA,MAAIE,QAAJ;;AACA,MAAIpB,KAAK,CAACmB,IAAV,EAAgB;AACfC,IAAAA,QAAQ,GAAGpB,KAAK,CAACmB,IAAN,CAAWE,GAAX,CAAe,UAAAC,IAAI,EAAI;AACjC,aACC;AACC,QAAA,GAAG,EAAEA,IAAI,CAACC,EADX;AAEC,QAAA,KAAK,EAAE;AACNC,UAAAA,MAAM,EAAE,iBADF;AAENC,UAAAA,MAAM,EAAE,SAFF;AAGNC,UAAAA,UAAU,EAAE,KAHN;AAINC,UAAAA,SAAS,EAAE,QAJL;AAKNC,UAAAA,OAAO,EAAE,WALH;AAMNC,UAAAA,OAAO,EAAE;AANH;AAFR,SAWEP,IAAI,CAACQ,IAXP,OAWc,KAXd,EAYC,MAAC,WAAD;AAAa,QAAA,OAAO,EAAE;AAAA,iBAAM7B,WAAW,CAACqB,IAAI,CAACC,EAAN,EAAU,CAAC,CAAX,CAAjB;AAAA;AAAtB,QAZD,OAY2D,IAZ3D,OAYkED,IAAI,CAACS,OAZvE,EAYgF,GAZhF,EAaC,MAAC,aAAD;AAAe,QAAA,OAAO,EAAE;AAAA,iBAAM9B,WAAW,CAACqB,IAAI,CAACC,EAAN,EAAU,CAAC,CAAX,CAAjB;AAAA;AAAxB,QAbD,EAa4D,GAb5D,CADD;AAiBA,KAlBU,CAAX;AAmBA;;AAED,SACC,mBACEvB,KAAK,CAACgC,MAAN,GAAe,CAAf,GACA,8BADA,GAEGhC,KAAK,CAACmB,IAAN,CAAWa,MAAX,GACH;AAAK,IAAA,KAAK,EAAE;AAAEH,MAAAA,OAAO,EAAE;AAAX;AAAZ,KAAwCT,QAAxC,CADG,GAGH,iCANF,CADD;AAWA,CAxDD;;AA0DA,eAAerB,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport ExposurePlus1TwoToneIcon from '@material-ui/icons/ExposurePlus1TwoTone';\nimport ExposureNeg1TwoToneIcon from '@material-ui/icons/ExposureNeg1TwoTone';\nimport Axios from 'axios';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport { Chip } from '@material-ui/core';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\n\nconst WordResults = ({ words }) => {\n\tconst handleClick = async (word_id, vote) => {\n\t\tconst value = localStorage.getItem('user');\n\t\tif (value) {\n\t\t\tlocalStorage.clear();\n\t\t\tconst word_id_var = {\n\t\t\t\tword_id: `${word_id}`,\n\t\t\t\tvote: `${vote}`,\n\t\t\t};\n\t\t\tconst body = JSON.stringify(word_id_var);\n\t\t\tconsole.log(body);\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst res = await Axios.post(`/api/:id/dict/${word_id}`, body, config);\n\t\t\talert(res.data);\n\t\t} else {\n\t\t\talert('You can vote just once per session!!!');\n\t\t}\n\t};\n\tlet wordList;\n\tif (words.data) {\n\t\twordList = words.data.map(each => {\n\t\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tkey={each.id}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tborder: '2px solid black',\n\t\t\t\t\t\tmargin: '5px 5px',\n\t\t\t\t\t\tfontWeight: '500',\n\t\t\t\t\t\tfontStyle: 'italic',\n\t\t\t\t\t\tpadding: '10px 10px',\n\t\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{each.word} {'   '}\n\t\t\t\t\t<ThumbUpIcon onClick={() => handleClick(each.id, +1)} /> {'  '} {each.upvotes}{' '}\n\t\t\t\t\t<ThumbDownIcon onClick={() => handleClick(each.id, -1)} />{' '}\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{words.length + 1 ? (\n\t\t\t\t<p>Loading!!!</p>\n\t\t\t) : words.data.length ? (\n\t\t\t\t<div style={{ display: 'inlineFlow' }}>{wordList}</div>\n\t\t\t) : (\n\t\t\t\t<p>Nothing Found</p>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default WordResults;\n"]},"metadata":{},"sourceType":"module"}