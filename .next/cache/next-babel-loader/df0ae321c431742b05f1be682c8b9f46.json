{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\n\nconst dictionary = ({\n  data\n}) => {\n  const {\n    0: searchWord,\n    1: setSearchWord\n  } = useState(''); //   const [searchResult, setSearchResult] = useState(\"\");\n\n  const router = useRouter();\n\n  const handleChange = async e => {\n    setSearchWord(e.target.value);\n  };\n\n  const {\n    imdbID,\n    Title,\n    Year,\n    Released,\n    Genre,\n    Director,\n    Actors,\n    Metascore,\n    imdbRating,\n    imdbVotes\n  } = data;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const searchForm = {\n      id: imdbID,\n      title: Title,\n      word: searchWord,\n      released_year: Year,\n      released: Released,\n      genre: Genre,\n      director: Director,\n      actors: Actors,\n      metascore: Metascore,\n      imdb_rating: imdbRating,\n      imdb_votes: imdbVotes\n    };\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(searchForm);\n    console.log(body);\n    const res = await Axios.post(`/movies/${router.query.movieId}/dict`, body, config);\n    console.log(res);\n    console.log('Reached the end!!!');\n  };\n\n  const {\n    movieId\n  } = router.query;\n  return __jsx(\"div\", null, console.log(data), __jsx(\"p\", null, \"Movie Title: \", data.Title), movieId, __jsx(\"form\", {\n    onSubmit: e => handleSubmit(e)\n  }, __jsx(\"label\", null, \"Search\"), __jsx(\"input\", {\n    type: \"text\",\n    value: searchWord,\n    onChange: e => handleChange(e)\n  })), __jsx(\"p\", null, \"Hello dictionary!!!\"));\n};\n\ndictionary.getInitialProps = async ctx => {\n  if (ctx.query.movieId) {\n    console.log(ctx.query.movieId);\n    const res = await fetch(`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`);\n    const data = await res.json();\n    return {\n      data\n    };\n  }\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/movies/[movieId]/dict.js"],"names":["React","Fragment","useState","useRouter","Axios","fetch","dictionary","data","searchWord","setSearchWord","router","handleChange","e","target","value","imdbID","Title","Year","Released","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","handleSubmit","preventDefault","searchForm","id","title","word","released_year","released","genre","director","actors","metascore","imdb_rating","imdb_votes","config","headers","body","JSON","stringify","console","log","res","post","query","movieId","getInitialProps","ctx","process","env","OmdbKey","json"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\n\nconst dictionary = ({ data }) => {\n\tconst [searchWord, setSearchWord] = useState('');\n\t//   const [searchResult, setSearchResult] = useState(\"\");\n\tconst router = useRouter();\n\tconst handleChange = async e => {\n\t\tsetSearchWord(e.target.value);\n\t};\n\n\tconst { imdbID, Title, Year, Released, Genre, Director, Actors, Metascore, imdbRating, imdbVotes} = data;\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst searchForm = {\n\t\t\tid: imdbID,\n\t\t\ttitle: Title,\n\t\t\tword: searchWord,\n\t\t\treleased_year: Year,\n\t\t\treleased: Released,\n\t\t\tgenre: Genre,\n\t\t\tdirector: Director,\n\t\t\tactors: Actors,\n\t\t\tmetascore: Metascore,\n\t\t\timdb_rating: imdbRating,\n\t\t\timdb_votes: imdbVotes\n\t\t};\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t};\n\t\tconst body = JSON.stringify(searchForm);\n\t\tconsole.log(body);\n\t\tconst res = await Axios.post(`/movies/${router.query.movieId}/dict`, body, config);\n\t\tconsole.log(res);\n\t\tconsole.log('Reached the end!!!');\n\t};\n\tconst { movieId } = router.query;\n\treturn (\n\t\t<div>\n\t\t\t{console.log(data)}\n\t\t\t<p>Movie Title: {data.Title}</p>\n\t\t\t{movieId}\n\t\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t<label>Search</label>\n\t\t\t\t<input type='text' value={searchWord} onChange={e => handleChange(e)}></input>\n\t\t\t</form>\n\t\t\t<p>Hello dictionary!!!</p>\n\t\t</div>\n\t);\n};\n\ndictionary.getInitialProps = async ctx => {\n\tif (ctx.query.movieId) {\n\t\tconsole.log(ctx.query.movieId);\n\t\tconst res = await fetch(\n\t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t);\n\t\tconst data = await res.json();\n\t\treturn { data };\n\t}\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}