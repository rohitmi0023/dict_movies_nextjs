{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\n\nvar movieId = function movieId(_ref) {\n  var props = _ref.props;\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }\n  }, \"Helooo\"), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }\n  }, props.Title));\n}; // This function gets called at build time\n\n\nexport var __N_SSG = true;\nexport default movieId;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js"],"names":["useRouter","movieId","props","Title"],"mappings":";;;;;AACA,SAASA,SAAT,QAA0B,aAA1B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;AAC3B,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAK,CAACC,KAAV,CAFJ,CADJ;AAMH,CAPD,C,CASA;;;;AA4BA,eAAeF,OAAf","sourcesContent":["import axios from 'axios'\nimport { useRouter } from 'next/router'\n\nconst movieId = ({ props }) => {\n    return (\n        <div>\n            <p>Helooo</p>\n            <p>{props.Title}</p>\n        </div>\n    )\n}\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n    // Call an external API endpoint to get posts\n\n    // Get the paths we want to pre-render based on posts\n    // const router = useRouter()\n    // const { movieId } = router.query\n    let paths = []\n    paths = path.push(movieId)\n\n    // We'll pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false }\n}\n\n//getStaticProps so that you can fetch the data about the post with this id and use it to pre-render the page:\nexport async function getStaticProps({ params }) {\n    // params contains the post `id`.\n    // If the route is like /posts/1, then params.id is 1\n    // const res = await fetch(`https://.../posts/${params.id}`)\n    // const post = await res.json()\n    const res = await axios(`http://www.omdbapi.com/?i=\"${params}\"&type=movie&apikey=9bc37d14`)\n    console.log(res)\n    // Pass post data to the page via props\n    return { props: { res } }\n}\n\n\nexport default movieId"]},"metadata":{},"sourceType":"module"}