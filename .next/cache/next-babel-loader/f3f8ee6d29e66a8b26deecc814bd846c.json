{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nconst dictionary = ({\n  data\n}) => {\n  const {\n    0: searchWord,\n    1: setSearchWord\n  } = useState('');\n  const {\n    0: words,\n    1: setWords\n  } = useState([]);\n  const {\n    0: file,\n    1: setFile\n  } = useState(null);\n\n  const handleChange = async e => {\n    setSearchWord(e.target.value);\n  };\n\n  const router = useRouter();\n  const {\n    imdbID,\n    Title,\n    Year,\n    Poster,\n    Genre,\n    Director,\n    Actors,\n    Metascore,\n    imdbRating,\n    imdbVotes\n  } = data;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const searchForm = {\n      imdbID,\n      Title,\n      searchWord,\n      Year,\n      Poster,\n      Genre,\n      Director,\n      Actors,\n      Metascore,\n      imdbRating,\n      imdbVotes\n    };\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const body = JSON.stringify(searchForm);\n      const res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n      setSearchWord('');\n      const config2 = {\n        'Content-Type': 'application/json'\n      };\n      Axios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n        setWords(res);\n      });\n      alert(res.data);\n    } catch (err) {\n      if (err) throw err;\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n    Axios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n      setWords(res);\n    });\n  }, []);\n\n  const handleSubmit2 = e => {\n    e.preventDefault(e);\n    const formData = new FormData();\n    formData.append('profile', file);\n    const config2 = {\n      'content-type': 'multipart/form-data'\n    };\n    const res = Axios.post(`/api/${data.imdbID}/subtitles`, formData, config2);\n  };\n\n  const handleChange2 = e => {\n    console.log(e.target.files[0]);\n    setFile(e.target.files[0]);\n  };\n\n  return __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(Head, null, __jsx(\"title\", null, \"Next App\")), __jsx(\"p\", null, \"Movie Title: \", data.Title), __jsx(\"form\", {\n    onSubmit: e => handleSubmit2(e) // method='POST'\n    // action={`/api/${data.imdbID}/subtitles`}\n    // enctype='multipart/form-data'\n\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"profile\",\n    placeholder: \"Upload it's subtitles\",\n    onChange2: e => handleChange2(e)\n  }), __jsx(\"button\", null, \"Submit\")), __jsx(Form, {\n    onSubmit: e => handleSubmit(e)\n  }, __jsx(FormGroup, null, __jsx(Input, {\n    value: searchWord,\n    className: \"form-control\",\n    onChange: e => handleChange(e),\n    placeholder: \"Enter the word\"\n  })), __jsx(Button, {\n    type: \"submit\",\n    className: \"btn btn-primary\"\n  }, \"Upload\")), __jsx(\"br\", null), __jsx(WordResults, {\n    words: words\n  }));\n};\n\ndictionary.getInitialProps = async ctx => {\n  if (ctx.query.movieId) {\n    const res = await fetch(`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`);\n    const data = await res.json();\n    return {\n      data\n    };\n  }\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/[movieId]/dict.js"],"names":["React","Fragment","useState","useEffect","Head","Axios","fetch","useRouter","WordResults","Button","Form","FormGroup","Label","Input","dictionary","data","searchWord","setSearchWord","words","setWords","file","setFile","handleChange","e","target","value","router","imdbID","Title","Year","Poster","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","handleSubmit","preventDefault","searchForm","config","headers","body","JSON","stringify","res","post","query","movieId","config2","get","then","alert","err","console","log","handleSubmit2","formData","FormData","append","handleChange2","files","getInitialProps","ctx","process","env","OmdbKey","json"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nconst dictionary = ({ data }) => {\n\tconst [searchWord, setSearchWord] = useState('');\n\tconst [words, setWords] = useState([]);\n\tconst [file, setFile] = useState(null);\n\n\tconst handleChange = async e => {\n\t\tsetSearchWord(e.target.value);\n\t};\n\tconst router = useRouter();\n\tconst {\n\t\timdbID,\n\t\tTitle,\n\t\tYear,\n\t\tPoster,\n\t\tGenre,\n\t\tDirector,\n\t\tActors,\n\t\tMetascore,\n\t\timdbRating,\n\t\timdbVotes,\n\t} = data;\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst searchForm = {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tsearchWord,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t};\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst body = JSON.stringify(searchForm);\n\t\t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n\t\t\tsetSearchWord('');\n\t\t\tconst config2 = {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t};\n\t\t\tAxios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n\t\t\t\tsetWords(res);\n\t\t\t});\n\t\t\talert(res.data);\n\t\t} catch (err) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tconst config = {\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n\t\t\tsetWords(res);\n\t\t});\n\t}, []);\n\n\tconst handleSubmit2 = e => {\n\t\te.preventDefault(e);\n\t\tconst formData = new FormData();\n\t\tformData.append('profile', file);\n\t\tconst config2 = {\n\t\t\t'content-type': 'multipart/form-data',\n\t\t};\n\t\tconst res = Axios.post(`/api/${data.imdbID}/subtitles`, formData, config2);\n\t};\n\n\tconst handleChange2 = e => {\n\t\tconsole.log(e.target.files[0]);\n\t\tsetFile(e.target.files[0]);\n\t};\n\n\treturn (\n\t\t<div className='container'>\n\t\t\t<Head>\n\t\t\t\t<title>Next App</title>\n\t\t\t</Head>\n\t\t\t<p>Movie Title: {data.Title}</p>\n\t\t\t<form\n\t\t\t\tonSubmit={e => handleSubmit2(e)}\n\t\t\t\t// method='POST'\n\t\t\t\t// action={`/api/${data.imdbID}/subtitles`}\n\t\t\t\t// enctype='multipart/form-data'\n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\ttype='file'\n\t\t\t\t\tname='profile'\n\t\t\t\t\tplaceholder=\"Upload it's subtitles\"\n\t\t\t\t\tonChange2={e => handleChange2(e)}\n\t\t\t\t/>\n\t\t\t\t<button>Submit</button>\n\t\t\t</form>\n\t\t\t<Form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t<FormGroup>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tvalue={searchWord}\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tonChange={e => handleChange(e)}\n\t\t\t\t\t\tplaceholder='Enter the word'\n\t\t\t\t\t></Input>\n\t\t\t\t</FormGroup>\n\t\t\t\t<Button type='submit' className='btn btn-primary'>\n\t\t\t\t\tUpload\n\t\t\t\t</Button>\n\t\t\t</Form>\n\t\t\t<br />\n\t\t\t<WordResults words={words} />\n\t\t</div>\n\t);\n};\n\ndictionary.getInitialProps = async ctx => {\n\tif (ctx.query.movieId) {\n\t\tconst res = await fetch(\n\t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t);\n\t\tconst data = await res.json();\n\t\treturn { data };\n\t}\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}