{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport { useState } from 'react';\n\nvar Movies = function Movies(_ref) {\n  var movie = _ref.movie;\n\n  var _useState = useState(''),\n      currentMovie = _useState[0],\n      setCurrentMovie = _useState[1];\n\n  var router = useRouter();\n  var movieId = router.query.movieId;\n  console.log(movieId);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, \"Helooo\"), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, movie.Title));\n}; // This function gets called at build time\n// export async function getStaticPaths() {\n// Call an external API endpoint to get posts\n// Get the paths we want to pre-render based on posts\n// const router = useRouter()\n// const { movieId } = router.query\n// let paths = []\n// paths = paths.push(movieId)\n// console.log(paths)\n// We'll pre-render only these paths at build time.\n// { fallback: false } means other routes should 404.\n// return { paths, fallback: false }\n// }\n\n\nexport var __N_SSG = true;\nexport default Movies;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js"],"names":["useRouter","useState","Movies","movie","currentMovie","setCurrentMovie","router","movieId","query","console","log","Title"],"mappings":";;;;;AACA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAAA,kBACcF,QAAQ,CAAC,EAAD,CADtB;AAAA,MACnBG,YADmB;AAAA,MACLC,eADK;;AAE1B,MAAMC,MAAM,GAAGN,SAAS,EAAxB;AAF0B,MAGlBO,OAHkB,GAGND,MAAM,CAACE,KAHD,CAGlBD,OAHkB;AAI1BE,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIJ,KAAK,CAACQ,KAAV,CAFJ,CADJ;AAMH,CAXD,C,CAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAcA,eAAeT,MAAf","sourcesContent":["import axios from 'axios'\nimport { useRouter } from 'next/router'\nimport { useState } from 'react'\n\nconst Movies = ({ movie }) => {\n    const [currentMovie, setCurrentMovie] = useState('')\n    const router = useRouter()\n    const { movieId } = router.query\n    console.log(movieId)\n    return (\n        <div>\n            <p>Helooo</p>\n            <p>{movie.Title}</p>\n        </div>\n    )\n}\n\n// This function gets called at build time\n// export async function getStaticPaths() {\n// Call an external API endpoint to get posts\n\n// Get the paths we want to pre-render based on posts\n// const router = useRouter()\n// const { movieId } = router.query\n// let paths = []\n// paths = paths.push(movieId)\n// console.log(paths)\n// We'll pre-render only these paths at build time.\n// { fallback: false } means other routes should 404.\n// return { paths, fallback: false }\n// }\n\nexport async function getStaticProps(context) {\n    console.log(context.params)\n    const movie = await axios(`http://www.omdbapi.com/?i=\"${context.params}\"&type=movie&apikey=9bc37d14`)\n    setCurrentMovie(movie)\n    console.log(currentMovie)\n    return {\n        props: {\n            movie\n        },\n    }\n}\n\nexport default Movies"]},"metadata":{},"sourceType":"module"}