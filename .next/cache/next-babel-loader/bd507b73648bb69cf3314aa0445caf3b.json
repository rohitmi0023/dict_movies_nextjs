{"ast":null,"code":"var _jsxFileName = \"/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\n\nconst movieId = ({\n  props\n}) => {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }\n  }, \"Helooo\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }\n  }, props.Title));\n}; // This function gets called at build time\n\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  // Get the paths we want to pre-render based on posts\n  const router = useRouter();\n  const {\n    movieId\n  } = router.query;\n  let path = [];\n  path = path.push(movieId); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n} //getStaticProps so that you can fetch the data about the post with this id and use it to pre-render the page:\n\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  // const res = await fetch(`https://.../posts/${params.id}`)\n  // const post = await res.json()\n  const res = await axios(`http://www.omdbapi.com/?i=\"${params}\"&type=movie&apikey=9bc37d14`);\n  console.log(res); // Pass post data to the page via props\n\n  return {\n    props: {\n      res\n    }\n  };\n}\nexport default movieId;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js"],"names":["axios","useRouter","movieId","props","Title","getStaticPaths","router","query","path","push","paths","fallback","getStaticProps","params","res","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC3B,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAK,CAACC,KAAV,CAFJ,CADJ;AAMH,CAPD,C,CASA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACnC;AAEA;AACA,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcI,MAAM,CAACC,KAA3B;AACA,MAAIC,IAAI,GAAG,EAAX;AACAA,EAAAA,IAAI,GAAGA,IAAI,CAACC,IAAL,CAAUP,OAAV,CAAP,CAPmC,CASnC;AACA;;AACA,SAAO;AAAEQ,IAAAA,KAAF;AAASC,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACH,C,CAED;;AACA,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC7C;AACA;AACA;AACA;AACA,QAAMC,GAAG,GAAG,MAAMd,KAAK,CAAE,8BAA6Ba,MAAO,8BAAtC,CAAvB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAN6C,CAO7C;;AACA,SAAO;AAAEX,IAAAA,KAAK,EAAE;AAAEW,MAAAA;AAAF;AAAT,GAAP;AACH;AAGD,eAAeZ,OAAf","sourcesContent":["import axios from 'axios'\nimport { useRouter } from 'next/router'\n\nconst movieId = ({ props }) => {\n    return (\n        <div>\n            <p>Helooo</p>\n            <p>{props.Title}</p>\n        </div>\n    )\n}\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n    // Call an external API endpoint to get posts\n\n    // Get the paths we want to pre-render based on posts\n    const router = useRouter()\n    const { movieId } = router.query\n    let path = []\n    path = path.push(movieId)\n\n    // We'll pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false }\n}\n\n//getStaticProps so that you can fetch the data about the post with this id and use it to pre-render the page:\nexport async function getStaticProps({ params }) {\n    // params contains the post `id`.\n    // If the route is like /posts/1, then params.id is 1\n    // const res = await fetch(`https://.../posts/${params.id}`)\n    // const post = await res.json()\n    const res = await axios(`http://www.omdbapi.com/?i=\"${params}\"&type=movie&apikey=9bc37d14`)\n    console.log(res)\n    // Pass post data to the page via props\n    return { props: { res } }\n}\n\n\nexport default movieId"]},"metadata":{},"sourceType":"module"}