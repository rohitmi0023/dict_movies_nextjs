{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router'; // import WordResults from '../../components/WordResults';\n\nvar dictionary = function dictionary(_ref) {\n  var data = _ref.data;\n\n  var _useState = useState(''),\n      searchWord = _useState[0],\n      setSearchWord = _useState[1];\n\n  var _useState2 = useState([]),\n      words = _useState2[0],\n      setWords = _useState2[1];\n\n  var handleChange = function handleChange(e) {\n    return _regeneratorRuntime.async(function handleChange$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSearchWord(e.target.value);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var router = useRouter();\n  var imdbID = data.imdbID,\n      Title = data.Title,\n      Year = data.Year,\n      Poster = data.Poster,\n      Genre = data.Genre,\n      Director = data.Director,\n      Actors = data.Actors,\n      Metascore = data.Metascore,\n      imdbRating = data.imdbRating,\n      imdbVotes = data.imdbVotes;\n\n  var handleSubmit = function handleSubmit(e) {\n    var searchForm, config, body, res, config2, res2;\n    return _regeneratorRuntime.async(function handleSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            e.preventDefault();\n            searchForm = {\n              imdbID: imdbID,\n              Title: Title,\n              searchWord: searchWord,\n              Year: Year,\n              Poster: Poster,\n              Genre: Genre,\n              Director: Director,\n              Actors: Actors,\n              Metascore: Metascore,\n              imdbRating: imdbRating,\n              imdbVotes: imdbVotes\n            };\n            _context2.prev = 2;\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            body = JSON.stringify(searchForm);\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(Axios.post(\"/api/\".concat(router.query.movieId, \"/dict\"), body, config));\n\n          case 7:\n            res = _context2.sent;\n            config2 = {\n              'Content-Type': 'application/json'\n            };\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(Axios.get(\"/api/\".concat(router.query.movieId, \"/dict\"), config2));\n\n          case 11:\n            res2 = _context2.sent;\n            setWords(res2);\n            setSearchWord('');\n            alert(res.data);\n            _context2.next = 22;\n            break;\n\n          case 17:\n            _context2.prev = 17;\n            _context2.t0 = _context2[\"catch\"](2);\n\n            if (!_context2.t0) {\n              _context2.next = 21;\n              break;\n            }\n\n            throw _context2.t0;\n\n          case 21:\n            console.log(_context2.t0);\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[2, 17]], Promise);\n  };\n\n  useEffect(function () {\n    var config = {\n      'Content-Type': 'application/json'\n    };\n    console.log(\"1\");\n    Axios.get(\"/api/\".concat(router.query.movieId, \"/dict\"), config).then(function (res) {\n      setWords(res);\n    });\n  }, [words]);\n  return __jsx(Fragment, null, __jsx(\"p\", null, \"Movie Title: \", data.Title), __jsx(\"form\", {\n    onSubmit: function onSubmit(e) {\n      return handleSubmit(e);\n    }\n  }, __jsx(\"label\", null, \"Search\"), __jsx(\"input\", {\n    type: \"text\",\n    value: searchWord,\n    onChange: function onChange(e) {\n      return handleChange(e);\n    }\n  })), __jsx(\"br\", null), __jsx(\"p\", null, data.Title, \" Dictionary...\"), words.data ? words.data.length ? __jsx(\"div\", null, words.data.map(function (each) {\n    return __jsx(\"span\", {\n      key: each.id\n    }, each.word, \" \", '  ');\n  })) : __jsx(\"p\", null, \"Nothing found!!!\") : __jsx(\"p\", null, \"Loading...\"));\n};\n\ndictionary.getInitialProps = function _callee(ctx) {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!ctx.query.movieId) {\n            _context3.next = 8;\n            break;\n          }\n\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"http://www.omdbapi.com/?i=\".concat(ctx.query.movieId, \"&type=movie&apikey=\").concat(process.env.OmdbKey)));\n\n        case 3:\n          res = _context3.sent;\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          data = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            data: data\n          });\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/[movieId]/dict.js"],"names":["React","Fragment","useState","useEffect","Axios","fetch","useRouter","dictionary","data","searchWord","setSearchWord","words","setWords","handleChange","e","target","value","router","imdbID","Title","Year","Poster","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","handleSubmit","preventDefault","searchForm","config","headers","body","JSON","stringify","post","query","movieId","res","config2","get","res2","alert","console","log","then","length","map","each","id","word","getInitialProps","ctx","process","env","OmdbKey","json"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\n// import WordResults from '../../components/WordResults';\n\nconst dictionary = ({ data }) => {\n\tconst [searchWord, setSearchWord] = useState('');\n\tconst [words, setWords] = useState([]);\n\n\tconst handleChange = async e => {\n\t\tsetSearchWord(e.target.value);\n\t};\n\tconst router = useRouter();\n\tconst {\n\t\timdbID,\n\t\tTitle,\n\t\tYear,\n\t\tPoster,\n\t\tGenre,\n\t\tDirector,\n\t\tActors,\n\t\tMetascore,\n\t\timdbRating,\n\t\timdbVotes,\n\t} = data;\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst searchForm = {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tsearchWord,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t};\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst body = JSON.stringify(searchForm);\n\t\t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n\t\t\tconst config2 = {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t};\n\t\t\tconst res2 = await Axios.get(`/api/${router.query.movieId}/dict`, config2);\n\t\t\tsetWords(res2);\n\t\t\tsetSearchWord('');\n\t\t\talert(res.data);\n\t\t} catch (err) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\tuseEffect(() => {\n\t\tconst config = {\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tconsole.log(`1`);\n\t\tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n\t\t\tsetWords(res);\n\t\t});\n\t}, [words]);\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<p>Movie Title: {data.Title}</p>\n\t\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t<label>Search</label>\n\t\t\t\t<input type='text' value={searchWord} onChange={e => handleChange(e)}></input>\n\t\t\t</form>\n\t\t\t<br />\n\t\t\t<p>{data.Title} Dictionary...</p>\n\t\t\t{words.data ? (\n\t\t\t\twords.data.length ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{words.data.map(each => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<span key={each.id}>\n\t\t\t\t\t\t\t\t\t{each.word} {'  '}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<p>Nothing found!!!</p>\n\t\t\t\t)\n\t\t\t) : (\n\t\t\t\t<p>Loading...</p>\n\t\t\t)}\n\t\t</Fragment>\n\t);\n};\n\ndictionary.getInitialProps = async ctx => {\n\tif (ctx.query.movieId) {\n\t\tconst res = await fetch(\n\t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t);\n\t\tconst data = await res.json();\n\t\treturn { data };\n\t}\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}