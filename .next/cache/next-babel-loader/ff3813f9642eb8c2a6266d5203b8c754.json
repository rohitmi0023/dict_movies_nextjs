{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Axios from 'axios';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nvar WordResults = function WordResults(_ref) {\n  var words = _ref.words;\n\n  var handleClick = function handleClick(word_id, vote) {\n    var value, word_id_var, body, config, res;\n    return _regeneratorRuntime.async(function handleClick$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            value = localStorage.getItem('user');\n\n            if (!value) {\n              _context.next = 13;\n              break;\n            }\n\n            localStorage.clear();\n            word_id_var = {\n              word_id: \"\".concat(word_id),\n              vote: \"\".concat(vote)\n            };\n            body = JSON.stringify(word_id_var);\n            console.log(body);\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(Axios.post(\"/api/:id/dict/\".concat(word_id), body, config));\n\n          case 9:\n            res = _context.sent;\n            alert(res.data);\n            _context.next = 14;\n            break;\n\n          case 13:\n            alert('You can vote just once per session!!!');\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var wordList;\n\n  if (words.data) {\n    wordList = words.data.map(function (each) {\n      return __jsx(\"div\", {\n        key: each.id,\n        style: {\n          border: '2px dashed black',\n          margin: '5px 5px',\n          fontWeight: '500',\n          fontStyle: 'italic',\n          padding: '10px 10px',\n          display: 'inline-block'\n        }\n      }, each.word, \" \", '   ', __jsx(ThumbUpIcon, {\n        onClick: function onClick() {\n          return handleClick(each.id, +1);\n        }\n      }), \" \", '  ', \" \", each.upvotes, ' ', __jsx(ThumbDownIcon, {\n        onClick: function onClick() {\n          return handleClick(each.id, -1);\n        }\n      }), ' ');\n    });\n  }\n\n  return __jsx(\"div\", null, words.length + 1 ? __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(CircularProgress, null)) : words.data.length ? __jsx(\"div\", {\n    style: {\n      display: 'inlineFlow'\n    }\n  }, wordList) : __jsx(\"p\", null, \"Nothing Found\"));\n};\n\nexport default WordResults;","map":null,"metadata":{},"sourceType":"module"}