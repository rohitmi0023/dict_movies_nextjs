{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport NavBar from '../../components/NavBar'; // import { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nconst dictionary = ({\n  data\n}) => {\n  const {\n    0: searchWord,\n    1: setSearchWord\n  } = useState('');\n  const {\n    0: words,\n    1: setWords\n  } = useState([]);\n  const {\n    0: matchedWords,\n    1: setMatchedWords\n  } = useState([]);\n\n  const handleChange = async e => {\n    setSearchWord(e.target.value);\n  };\n\n  const router = useRouter();\n  const {\n    imdbID,\n    Title,\n    Year,\n    Poster,\n    Genre,\n    Director,\n    Actors,\n    Metascore,\n    imdbRating,\n    imdbVotes\n  } = data;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const searchForm = {\n      imdbID,\n      Title,\n      searchWord,\n      Year,\n      Poster,\n      Genre,\n      Director,\n      Actors,\n      Metascore,\n      imdbRating,\n      imdbVotes\n    };\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const body = JSON.stringify(searchForm);\n      const res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n      setSearchWord('');\n      const config2 = {\n        'Content-Type': 'application/json'\n      };\n      Axios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n        setWords(res);\n      });\n      alert(res.data);\n    } catch (err) {\n      if (err) throw err;\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n    Axios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n      setWords(res);\n    });\n  }, []);\n\n  const handleSearch = async e => {\n    if (!words.data.length) {\n      alert(`No word is added yet!`);\n    } else {\n      const res = await Axios.get(`/api/${data.imdbID}/dict/matched`);\n\n      if (res.data === 'No subtitles found') {\n        alert('No subtitles was found!!!');\n      } else {\n        words.data.map(each => {\n          let result = res.data.data.search(each.word);\n\n          if (result !== -1 && matchedWords.indexOf(each.word) === -1) {\n            setMatchedWords(oldArray => [...oldArray, each.word]);\n          }\n        });\n      }\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(Head, null, __jsx(\"title\", null, \"Movies Words\")), __jsx(NavBar, null), __jsx(\"p\", {\n    style: {\n      textAlign: 'center',\n      fontSize: '20px'\n    }\n  }, data.Title), __jsx(\"form\", {\n    method: \"POST\",\n    action: `/api/${data.imdbID}/subtitles`,\n    enctype: \"multipart/form-data\"\n  }, __jsx(\"input\", {\n    style: {\n      fontSize: '17px',\n      width: '150px'\n    },\n    type: \"file\",\n    name: \"profile\",\n    placeholder: \"Upload it's subtitles\"\n  }), __jsx(\"button\", null, \"Upload\")), __jsx(\"br\", null), __jsx(\"button\", {\n    onClick: e => handleSearch(e)\n  }, \"Search\"), __jsx(\"br\", null), __jsx(\"form\", {\n    onSubmit: e => handleSubmit(e)\n  }, __jsx(\"input\", {\n    value: searchWord,\n    className: \"form-control\",\n    onChange: e => handleChange(e),\n    placeholder: \"Enter the word\"\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\"\n  }, \"Submit\")), __jsx(\"br\", null), matchedWords.length > 0 && __jsx(\"div\", null, matchedWords), __jsx(\"br\", null), __jsx(WordResults, {\n    words: words\n  }));\n};\n\ndictionary.getInitialProps = async ctx => {\n  if (ctx.query.movieId) {\n    const res = await fetch(`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`);\n    const data = await res.json();\n    return {\n      data\n    };\n  }\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/[movieId]/dict.js"],"names":["React","Fragment","useState","useEffect","Head","Axios","fetch","useRouter","WordResults","NavBar","dictionary","data","searchWord","setSearchWord","words","setWords","matchedWords","setMatchedWords","handleChange","e","target","value","router","imdbID","Title","Year","Poster","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","handleSubmit","preventDefault","searchForm","config","headers","body","JSON","stringify","res","post","query","movieId","config2","get","then","alert","err","console","log","handleSearch","length","map","each","result","search","word","indexOf","oldArray","textAlign","fontSize","width","getInitialProps","ctx","process","env","OmdbKey","json"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport NavBar from '../../components/NavBar';\n// import { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nconst dictionary = ({ data }) => {\n\tconst [searchWord, setSearchWord] = useState('');\n\tconst [words, setWords] = useState([]);\n\tconst [matchedWords, setMatchedWords] = useState([]);\n\n\tconst handleChange = async e => {\n\t\tsetSearchWord(e.target.value);\n\t};\n\tconst router = useRouter();\n\tconst {\n\t\timdbID,\n\t\tTitle,\n\t\tYear,\n\t\tPoster,\n\t\tGenre,\n\t\tDirector,\n\t\tActors,\n\t\tMetascore,\n\t\timdbRating,\n\t\timdbVotes,\n\t} = data;\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst searchForm = {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tsearchWord,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t};\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst body = JSON.stringify(searchForm);\n\t\t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n\t\t\tsetSearchWord('');\n\t\t\tconst config2 = {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t};\n\t\t\tAxios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n\t\t\t\tsetWords(res);\n\t\t\t});\n\t\t\talert(res.data);\n\t\t} catch (err) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tconst config = {\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n\t\t\tsetWords(res);\n\t\t});\n\t}, []);\n\n\tconst handleSearch = async e => {\n\t\tif (!words.data.length) {\n\t\t\talert(`No word is added yet!`);\n\t\t} else {\n\t\t\tconst res = await Axios.get(`/api/${data.imdbID}/dict/matched`);\n\t\t\tif (res.data === 'No subtitles found') {\n\t\t\t\talert('No subtitles was found!!!');\n\t\t\t} else {\n\t\t\t\twords.data.map(each => {\n\t\t\t\t\tlet result = res.data.data.search(each.word);\n\t\t\t\t\tif (result !== -1 && matchedWords.indexOf(each.word) === -1) {\n\t\t\t\t\t\tsetMatchedWords(oldArray => [...oldArray, each.word]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className='container'>\n\t\t\t<Head>\n\t\t\t\t<title>Movies Words</title>\n\t\t\t</Head>\n\t\t\t<NavBar />\n\t\t\t<p style={{ textAlign: 'center', fontSize: '20px' }}>{data.Title}</p>\n\t\t\t<form\n\t\t\t\tmethod='POST'\n\t\t\t\taction={`/api/${data.imdbID}/subtitles`}\n\t\t\t\tenctype='multipart/form-data'\n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\tstyle={{ fontSize: '17px', width: '150px' }}\n\t\t\t\t\ttype='file'\n\t\t\t\t\tname='profile'\n\t\t\t\t\tplaceholder=\"Upload it's subtitles\"\n\t\t\t\t/>\n\t\t\t\t<button>Upload</button>\n\t\t\t</form>\n\t\t\t<br />\n\t\t\t<button onClick={e => handleSearch(e)}>Search</button>\n\t\t\t<br />\n\t\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t{/* <FormGroup> */}\n\t\t\t\t<input\n\t\t\t\t\tvalue={searchWord}\n\t\t\t\t\tclassName='form-control'\n\t\t\t\t\tonChange={e => handleChange(e)}\n\t\t\t\t\tplaceholder='Enter the word'\n\t\t\t\t></input>\n\t\t\t\t{/* </FormGroup> */}\n\t\t\t\t<button type='submit' className='btn btn-primary'>\n\t\t\t\t\tSubmit\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t<br />\n\t\t\t{matchedWords.length > 0 && <div>{matchedWords}</div>}\n\t\t\t<br />\n\t\t\t<WordResults words={words} />\n\t\t</div>\n\t);\n};\n\ndictionary.getInitialProps = async ctx => {\n\tif (ctx.query.movieId) {\n\t\tconst res = await fetch(\n\t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t);\n\t\tconst data = await res.json();\n\t\treturn { data };\n\t}\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}