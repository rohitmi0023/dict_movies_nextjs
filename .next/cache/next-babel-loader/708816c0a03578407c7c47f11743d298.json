{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nvar dictionary = function dictionary(_ref) {\n  var data = _ref.data;\n\n  var _useState = useState(''),\n      searchWord = _useState[0],\n      setSearchWord = _useState[1];\n\n  var _useState2 = useState([]),\n      words = _useState2[0],\n      setWords = _useState2[1];\n\n  var _useState3 = useState(null),\n      file = _useState3[0],\n      setFile = _useState3[1];\n\n  var handleChange = function handleChange(e) {\n    return _regeneratorRuntime.async(function handleChange$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSearchWord(e.target.value);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var router = useRouter();\n  var imdbID = data.imdbID,\n      Title = data.Title,\n      Year = data.Year,\n      Poster = data.Poster,\n      Genre = data.Genre,\n      Director = data.Director,\n      Actors = data.Actors,\n      Metascore = data.Metascore,\n      imdbRating = data.imdbRating,\n      imdbVotes = data.imdbVotes;\n\n  var handleSubmit = function handleSubmit(e) {\n    var searchForm, config, body, res, config2;\n    return _regeneratorRuntime.async(function handleSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            e.preventDefault();\n            searchForm = {\n              imdbID: imdbID,\n              Title: Title,\n              searchWord: searchWord,\n              Year: Year,\n              Poster: Poster,\n              Genre: Genre,\n              Director: Director,\n              Actors: Actors,\n              Metascore: Metascore,\n              imdbRating: imdbRating,\n              imdbVotes: imdbVotes\n            };\n            _context2.prev = 2;\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            body = JSON.stringify(searchForm);\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(Axios.post(\"/api/\".concat(router.query.movieId, \"/dict\"), body, config));\n\n          case 7:\n            res = _context2.sent;\n            setSearchWord('');\n            config2 = {\n              'Content-Type': 'application/json'\n            };\n            Axios.get(\"/api/\".concat(router.query.movieId, \"/dict\"), config2).then(function (res) {\n              setWords(res);\n            });\n            alert(res.data);\n            _context2.next = 19;\n            break;\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](2);\n\n            if (!_context2.t0) {\n              _context2.next = 18;\n              break;\n            }\n\n            throw _context2.t0;\n\n          case 18:\n            console.log(_context2.t0);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[2, 14]], Promise);\n  };\n\n  useEffect(function () {\n    var config = {\n      'Content-Type': 'application/json'\n    };\n    Axios.get(\"/api/\".concat(router.query.movieId, \"/dict\"), config).then(function (res) {\n      setWords(res);\n    });\n  }, []);\n\n  var handleSubmit2 = function handleSubmit2(e) {\n    e.preventDefault(e);\n    var formData = new FormData();\n    formData.append('profile', file);\n    var config = {\n      'content-type': 'multipart/form-data'\n    };\n    var res = Axios.post(\"/api/\".concat(data.imdbID, \"/subtitles\"), formData, config);\n  };\n\n  var handleChange2 = function handleChange2(e) {\n    setFile(e.target.files[0]);\n  };\n\n  return __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(Head, null, __jsx(\"title\", null, \"Next App\")), __jsx(\"p\", null, \"Movie Title: \", data.Title), __jsx(\"form\", {\n    onSubmit: function onSubmit(e) {\n      return handleSubmit2(e);\n    } // method='POST'\n    // action={`/api/${data.imdbID}/subtitles`}\n    // enctype='multipart/form-data'\n\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"profile\",\n    placeholder: \"Upload it's subtitles\",\n    onChange2: function onChange2(e) {\n      return handleChange2(e);\n    }\n  }), __jsx(\"button\", null, \"Submit\")), __jsx(Form, {\n    onSubmit: function onSubmit(e) {\n      return handleSubmit(e);\n    }\n  }, __jsx(FormGroup, null, __jsx(Input, {\n    value: searchWord,\n    className: \"form-control\",\n    onChange: function onChange(e) {\n      return handleChange(e);\n    },\n    placeholder: \"Enter the word\"\n  })), __jsx(Button, {\n    type: \"submit\",\n    className: \"btn btn-primary\"\n  }, \"Upload\")), __jsx(\"br\", null), __jsx(WordResults, {\n    words: words\n  }));\n};\n\ndictionary.getInitialProps = function _callee(ctx) {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!ctx.query.movieId) {\n            _context3.next = 8;\n            break;\n          }\n\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"http://www.omdbapi.com/?i=\".concat(ctx.query.movieId, \"&type=movie&apikey=\").concat(process.env.OmdbKey)));\n\n        case 3:\n          res = _context3.sent;\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          data = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            data: data\n          });\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/[movieId]/dict.js"],"names":["React","Fragment","useState","useEffect","Head","Axios","fetch","useRouter","WordResults","Button","Form","FormGroup","Label","Input","dictionary","data","searchWord","setSearchWord","words","setWords","file","setFile","handleChange","e","target","value","router","imdbID","Title","Year","Poster","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","handleSubmit","preventDefault","searchForm","config","headers","body","JSON","stringify","post","query","movieId","res","config2","get","then","alert","console","log","handleSubmit2","formData","FormData","append","handleChange2","files","getInitialProps","ctx","process","env","OmdbKey","json"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,KAAlC,EAAyCC,KAAzC,QAAsD,YAAtD;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACIb,QAAQ,CAAC,EAAD,CADZ;AAAA,MACzBc,UADyB;AAAA,MACbC,aADa;;AAAA,mBAENf,QAAQ,CAAC,EAAD,CAFF;AAAA,MAEzBgB,KAFyB;AAAA,MAElBC,QAFkB;;AAAA,mBAGRjB,QAAQ,CAAC,IAAD,CAHA;AAAA,MAGzBkB,IAHyB;AAAA,MAGnBC,OAHmB;;AAKhC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAMC,CAAN;AAAA;AAAA;AAAA;AAAA;AACpBN,YAAAA,aAAa,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;;AADoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAGA,MAAMC,MAAM,GAAGnB,SAAS,EAAxB;AARgC,MAU/BoB,MAV+B,GAoB5BZ,IApB4B,CAU/BY,MAV+B;AAAA,MAW/BC,KAX+B,GAoB5Bb,IApB4B,CAW/Ba,KAX+B;AAAA,MAY/BC,IAZ+B,GAoB5Bd,IApB4B,CAY/Bc,IAZ+B;AAAA,MAa/BC,MAb+B,GAoB5Bf,IApB4B,CAa/Be,MAb+B;AAAA,MAc/BC,KAd+B,GAoB5BhB,IApB4B,CAc/BgB,KAd+B;AAAA,MAe/BC,QAf+B,GAoB5BjB,IApB4B,CAe/BiB,QAf+B;AAAA,MAgB/BC,MAhB+B,GAoB5BlB,IApB4B,CAgB/BkB,MAhB+B;AAAA,MAiB/BC,SAjB+B,GAoB5BnB,IApB4B,CAiB/BmB,SAjB+B;AAAA,MAkB/BC,UAlB+B,GAoB5BpB,IApB4B,CAkB/BoB,UAlB+B;AAAA,MAmB/BC,SAnB+B,GAoB5BrB,IApB4B,CAmB/BqB,SAnB+B;;AAsBhC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAMd,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBA,YAAAA,CAAC,CAACe,cAAF;AACMC,YAAAA,UAFc,GAED;AAClBZ,cAAAA,MAAM,EAANA,MADkB;AAElBC,cAAAA,KAAK,EAALA,KAFkB;AAGlBZ,cAAAA,UAAU,EAAVA,UAHkB;AAIlBa,cAAAA,IAAI,EAAJA,IAJkB;AAKlBC,cAAAA,MAAM,EAANA,MALkB;AAMlBC,cAAAA,KAAK,EAALA,KANkB;AAOlBC,cAAAA,QAAQ,EAARA,QAPkB;AAQlBC,cAAAA,MAAM,EAANA,MARkB;AASlBC,cAAAA,SAAS,EAATA,SATkB;AAUlBC,cAAAA,UAAU,EAAVA,UAVkB;AAWlBC,cAAAA,SAAS,EAATA;AAXkB,aAFC;AAAA;AAgBbI,YAAAA,MAhBa,GAgBJ;AACdC,cAAAA,OAAO,EAAE;AACR,gCAAgB;AADR;AADK,aAhBI;AAqBbC,YAAAA,IArBa,GAqBNC,IAAI,CAACC,SAAL,CAAeL,UAAf,CArBM;AAAA;AAAA,6CAsBDlC,KAAK,CAACwC,IAAN,gBAAmBnB,MAAM,CAACoB,KAAP,CAAaC,OAAhC,YAAgDL,IAAhD,EAAsDF,MAAtD,CAtBC;;AAAA;AAsBbQ,YAAAA,GAtBa;AAuBnB/B,YAAAA,aAAa,CAAC,EAAD,CAAb;AACMgC,YAAAA,OAxBa,GAwBH;AACf,8BAAgB;AADD,aAxBG;AA2BnB5C,YAAAA,KAAK,CAAC6C,GAAN,gBAAkBxB,MAAM,CAACoB,KAAP,CAAaC,OAA/B,YAA+CE,OAA/C,EAAwDE,IAAxD,CAA6D,UAAAH,GAAG,EAAI;AACnE7B,cAAAA,QAAQ,CAAC6B,GAAD,CAAR;AACA,aAFD;AAGAI,YAAAA,KAAK,CAACJ,GAAG,CAACjC,IAAL,CAAL;AA9BmB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAiCnBsC,YAAAA,OAAO,CAACC,GAAR;;AAjCmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAqCAnD,EAAAA,SAAS,CAAC,YAAM;AACf,QAAMqC,MAAM,GAAG;AACd,sBAAgB;AADF,KAAf;AAGAnC,IAAAA,KAAK,CAAC6C,GAAN,gBAAkBxB,MAAM,CAACoB,KAAP,CAAaC,OAA/B,YAA+CP,MAA/C,EAAuDW,IAAvD,CAA4D,UAAAH,GAAG,EAAI;AAClE7B,MAAAA,QAAQ,CAAC6B,GAAD,CAAR;AACA,KAFD;AAGA,GAPQ,EAON,EAPM,CAAT;;AASA,MAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAAAhC,CAAC,EAAI;AAC1BA,IAAAA,CAAC,CAACe,cAAF,CAAiBf,CAAjB;AACA,QAAMiC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2BtC,IAA3B;AACA,QAAMoB,MAAM,GAAG;AACd,sBAAgB;AADF,KAAf;AAGA,QAAMQ,GAAG,GAAG3C,KAAK,CAACwC,IAAN,gBAAmB9B,IAAI,CAACY,MAAxB,iBAA4C6B,QAA5C,EAAsDhB,MAAtD,CAAZ;AACA,GARD;;AAUA,MAAMmB,aAAa,GAAG,SAAhBA,aAAgB,CAAApC,CAAC,EAAI;AAC1BF,IAAAA,OAAO,CAACE,CAAC,CAACC,MAAF,CAASoC,KAAT,CAAe,CAAf,CAAD,CAAP;AACA,GAFD;;AAIA,SACC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC,MAAC,IAAD,QACC,gCADD,CADD,EAIC,kCAAiB7C,IAAI,CAACa,KAAtB,CAJD,EAKC;AACC,IAAA,QAAQ,EAAE,kBAAAL,CAAC;AAAA,aAAIgC,aAAa,CAAChC,CAAD,CAAjB;AAAA,KADZ,CAEC;AACA;AACA;;AAJD,KAMC;AACC,IAAA,IAAI,EAAC,MADN;AAEC,IAAA,IAAI,EAAC,SAFN;AAGC,IAAA,WAAW,EAAC,uBAHb;AAIC,IAAA,SAAS,EAAE,mBAAAA,CAAC;AAAA,aAAIoC,aAAa,CAACpC,CAAD,CAAjB;AAAA;AAJb,IAND,EAYC,+BAZD,CALD,EAmBC,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAE,kBAAAA,CAAC;AAAA,aAAIc,YAAY,CAACd,CAAD,CAAhB;AAAA;AAAjB,KACC,MAAC,SAAD,QACC,MAAC,KAAD;AACC,IAAA,KAAK,EAAEP,UADR;AAEC,IAAA,SAAS,EAAC,cAFX;AAGC,IAAA,QAAQ,EAAE,kBAAAO,CAAC;AAAA,aAAID,YAAY,CAACC,CAAD,CAAhB;AAAA,KAHZ;AAIC,IAAA,WAAW,EAAC;AAJb,IADD,CADD,EASC,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC;AAAhC,cATD,CAnBD,EAgCC,iBAhCD,EAiCC,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEL;AAApB,IAjCD,CADD;AAqCA,CAvHD;;AAyHAJ,UAAU,CAAC+C,eAAX,GAA6B,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACxBA,GAAG,CAAChB,KAAJ,CAAUC,OADc;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAETzC,KAAK,qCACOwD,GAAG,CAAChB,KAAJ,CAAUC,OADjB,gCAC8CgB,OAAO,CAACC,GAAR,CAAYC,OAD1D,EAFI;;AAAA;AAErBjB,UAAAA,GAFqB;AAAA;AAAA,2CAKRA,GAAG,CAACkB,IAAJ,EALQ;;AAAA;AAKrBnD,UAAAA,IALqB;AAAA,4CAMpB;AAAEA,YAAAA,IAAI,EAAJA;AAAF,WANoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B;;AAUA,eAAeD,UAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport WordResults from '../../components/WordResults';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nconst dictionary = ({ data }) => {\n\tconst [searchWord, setSearchWord] = useState('');\n\tconst [words, setWords] = useState([]);\n\tconst [file, setFile] = useState(null);\n\n\tconst handleChange = async e => {\n\t\tsetSearchWord(e.target.value);\n\t};\n\tconst router = useRouter();\n\tconst {\n\t\timdbID,\n\t\tTitle,\n\t\tYear,\n\t\tPoster,\n\t\tGenre,\n\t\tDirector,\n\t\tActors,\n\t\tMetascore,\n\t\timdbRating,\n\t\timdbVotes,\n\t} = data;\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst searchForm = {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tsearchWord,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t};\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst body = JSON.stringify(searchForm);\n\t\t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n\t\t\tsetSearchWord('');\n\t\t\tconst config2 = {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t};\n\t\t\tAxios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n\t\t\t\tsetWords(res);\n\t\t\t});\n\t\t\talert(res.data);\n\t\t} catch (err) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tconst config = {\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n\t\t\tsetWords(res);\n\t\t});\n\t}, []);\n\n\tconst handleSubmit2 = e => {\n\t\te.preventDefault(e);\n\t\tconst formData = new FormData();\n\t\tformData.append('profile', file);\n\t\tconst config = {\n\t\t\t'content-type': 'multipart/form-data',\n\t\t};\n\t\tconst res = Axios.post(`/api/${data.imdbID}/subtitles`, formData, config);\n\t};\n\n\tconst handleChange2 = e => {\n\t\tsetFile(e.target.files[0]);\n\t};\n\n\treturn (\n\t\t<div className='container'>\n\t\t\t<Head>\n\t\t\t\t<title>Next App</title>\n\t\t\t</Head>\n\t\t\t<p>Movie Title: {data.Title}</p>\n\t\t\t<form\n\t\t\t\tonSubmit={e => handleSubmit2(e)}\n\t\t\t\t// method='POST'\n\t\t\t\t// action={`/api/${data.imdbID}/subtitles`}\n\t\t\t\t// enctype='multipart/form-data'\n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\ttype='file'\n\t\t\t\t\tname='profile'\n\t\t\t\t\tplaceholder=\"Upload it's subtitles\"\n\t\t\t\t\tonChange2={e => handleChange2(e)}\n\t\t\t\t/>\n\t\t\t\t<button>Submit</button>\n\t\t\t</form>\n\t\t\t<Form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t<FormGroup>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tvalue={searchWord}\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tonChange={e => handleChange(e)}\n\t\t\t\t\t\tplaceholder='Enter the word'\n\t\t\t\t\t></Input>\n\t\t\t\t</FormGroup>\n\t\t\t\t<Button type='submit' className='btn btn-primary'>\n\t\t\t\t\tUpload\n\t\t\t\t</Button>\n\t\t\t</Form>\n\t\t\t<br />\n\t\t\t<WordResults words={words} />\n\t\t</div>\n\t);\n};\n\ndictionary.getInitialProps = async ctx => {\n\tif (ctx.query.movieId) {\n\t\tconst res = await fetch(\n\t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t);\n\t\tconst data = await res.json();\n\t\treturn { data };\n\t}\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}