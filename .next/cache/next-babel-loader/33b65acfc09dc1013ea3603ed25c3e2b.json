{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Axios from 'axios';\n\nvar dictionary = function dictionary() {\n  var _useState = useState(''),\n      searchWord = _useState[0],\n      setSearchWord = _useState[1]; //   const [searchResult, setSearchResult] = useState(\"\");\n\n\n  var router = useRouter();\n\n  var handleChange = function handleChange(e) {\n    return _regeneratorRuntime.async(function handleChange$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSearchWord(e.target.value);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    var searchForm, config, body, res;\n    return _regeneratorRuntime.async(function handleSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            e.preventDefault();\n            searchForm = {\n              id: router.query.movieId,\n              // title: ,\n              word: searchWord\n            };\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            body = JSON.stringify(searchForm);\n            console.log(body);\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(Axios.post(\"/movies/\".concat(router.query.movieId, \"/dict\"), body, config));\n\n          case 7:\n            res = _context2.sent;\n            console.log(res);\n            console.log('Reached the end!!!');\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var movieId = router.query.movieId;\n  return __jsx(\"div\", null, movieId, __jsx(\"form\", {\n    onSubmit: function onSubmit(e) {\n      return handleSubmit(e);\n    }\n  }, __jsx(\"label\", null, \"Search\"), __jsx(\"input\", {\n    type: \"text\",\n    value: searchWord,\n    onChange: function onChange(e) {\n      return handleChange(e);\n    }\n  })), __jsx(\"p\", null, \"Hello dictionary!!!\"));\n};\n\ndictionary.getInitialProps = function _callee(ctx) {\n  var res;\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log(ctx);\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(Axios(\"http://www.omdbapi.com/?i=tt0085574/&type=movie&apikey=\".concat(process.env.OmdbKey)));\n\n        case 3:\n          res = _context3.sent;\n          console.log(res);\n          return _context3.abrupt(\"return\", {\n            data: res\n          });\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/movies/[movieId]/dict.js"],"names":["React","Fragment","useState","useRouter","Axios","dictionary","searchWord","setSearchWord","router","handleChange","e","target","value","handleSubmit","preventDefault","searchForm","id","query","movieId","word","config","headers","body","JSON","stringify","console","log","post","res","getInitialProps","ctx","process","env","OmdbKey","data"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA,kBACYH,QAAQ,CAAC,EAAD,CADpB;AAAA,MACjBI,UADiB;AAAA,MACLC,aADK,iBAExB;;;AACA,MAAMC,MAAM,GAAGL,SAAS,EAAxB;;AACA,MAAMM,YAAY,GAAG,SAAfA,YAAe,CAAMC,CAAN;AAAA;AAAA;AAAA;AAAA;AACpBH,YAAAA,aAAa,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;;AADoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAGA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAMH,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBA,YAAAA,CAAC,CAACI,cAAF;AACMC,YAAAA,UAFc,GAED;AAClBC,cAAAA,EAAE,EAAER,MAAM,CAACS,KAAP,CAAaC,OADC;AAElB;AACAC,cAAAA,IAAI,EAAEb;AAHY,aAFC;AAOdc,YAAAA,MAPc,GAOL;AACdC,cAAAA,OAAO,EAAE;AACR,gCAAgB;AADR;AADK,aAPK;AAYdC,YAAAA,IAZc,GAYPC,IAAI,CAACC,SAAL,CAAeT,UAAf,CAZO;AAapBU,YAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAboB;AAAA,6CAcFlB,KAAK,CAACuB,IAAN,mBAAsBnB,MAAM,CAACS,KAAP,CAAaC,OAAnC,YAAmDI,IAAnD,EAAyDF,MAAzD,CAdE;;AAAA;AAcdQ,YAAAA,GAdc;AAepBH,YAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACAH,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AAhBoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAPwB,MAyBhBR,OAzBgB,GAyBJV,MAAM,CAACS,KAzBH,CAyBhBC,OAzBgB;AA0BxB,SACC,mBACEA,OADF,EAEC;AAAM,IAAA,QAAQ,EAAE,kBAAAR,CAAC;AAAA,aAAIG,YAAY,CAACH,CAAD,CAAhB;AAAA;AAAjB,KACC,8BADD,EAEC;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEJ,UAA1B;AAAsC,IAAA,QAAQ,EAAE,kBAAAI,CAAC;AAAA,aAAID,YAAY,CAACC,CAAD,CAAhB;AAAA;AAAjD,IAFD,CAFD,EAMC,uCAND,CADD;AAUA,CApCD;;AAsCAL,UAAU,CAACwB,eAAX,GAA6B,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BL,UAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AAD4B;AAAA,2CAEV1B,KAAK,kEACoC2B,OAAO,CAACC,GAAR,CAAYC,OADhD,EAFK;;AAAA;AAEtBL,UAAAA,GAFsB;AAK5BH,UAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AAL4B,4CAMrB;AAAEM,YAAAA,IAAI,EAAEN;AAAR,WANqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B;;AASA,eAAevB,UAAf","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Axios from 'axios';\n\nconst dictionary = () => {\n\tconst [searchWord, setSearchWord] = useState('');\n\t//   const [searchResult, setSearchResult] = useState(\"\");\n\tconst router = useRouter();\n\tconst handleChange = async e => {\n\t\tsetSearchWord(e.target.value);\n\t};\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst searchForm = {\n\t\t\tid: router.query.movieId,\n\t\t\t// title: ,\n\t\t\tword: searchWord,\n\t\t};\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t};\n\t\tconst body = JSON.stringify(searchForm);\n\t\tconsole.log(body);\n\t\tconst res = await Axios.post(`/movies/${router.query.movieId}/dict`, body, config);\n\t\tconsole.log(res);\n\t\tconsole.log('Reached the end!!!');\n\t};\n\tconst { movieId } = router.query;\n\treturn (\n\t\t<div>\n\t\t\t{movieId}\n\t\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t<label>Search</label>\n\t\t\t\t<input type='text' value={searchWord} onChange={e => handleChange(e)}></input>\n\t\t\t</form>\n\t\t\t<p>Hello dictionary!!!</p>\n\t\t</div>\n\t);\n};\n\ndictionary.getInitialProps = async ctx => {\n\tconsole.log(ctx);\n\tconst res = await Axios(\n\t\t`http://www.omdbapi.com/?i=tt0085574/&type=movie&apikey=${process.env.OmdbKey}`\n\t);\n\tconsole.log(res);\n\treturn { data: res };\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}