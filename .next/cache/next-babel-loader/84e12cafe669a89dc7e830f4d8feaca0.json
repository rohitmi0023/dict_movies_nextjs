{"ast":null,"code":"var _jsxFileName = \"/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport { useState } from 'react';\n\nconst Movies = () => {\n  // const [currentMovie, setCurrentMovie] = useState('')\n  const router = useRouter();\n  const {\n    movieId\n  } = router.query;\n  console.log(movieId);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, \"Helooo\"));\n}; // This function gets called at build time\n// export async function getStaticPaths() {\n// Call an external API endpoint to get posts\n// Get the paths we want to pre-render based on posts\n// const router = useRouter()\n// const { movieId } = router.query\n// let paths = []\n// paths = paths.push(movieId)\n// console.log(paths)\n// We'll pre-render only these paths at build time.\n// { fallback: false } means other routes should 404.\n// return { paths, fallback: false }\n// }\n\n\nexport async function getStaticProps(context) {\n  console.log(context.params);\n  const movie = await axios(`http://www.omdbapi.com/?i=\"${context.params}\"&type=movie&apikey=9bc37d14`);\n  console.log(movie); // return {\n  //     props: {\n  //         movie\n  //     },\n  // }\n}\nexport default Movies;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/dict_movies/pages/movies/[movieId].js"],"names":["axios","useRouter","useState","Movies","router","movieId","query","console","log","getStaticProps","context","params","movie"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACjB;AACA,QAAMC,MAAM,GAAGH,SAAS,EAAxB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAcD,MAAM,CAACE,KAA3B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ;AAMH,CAXD,C,CAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,eAAeI,cAAf,CAA8BC,OAA9B,EAAuC;AAC1CH,EAAAA,OAAO,CAACC,GAAR,CAAYE,OAAO,CAACC,MAApB;AACA,QAAMC,KAAK,GAAG,MAAMZ,KAAK,CAAE,8BAA6BU,OAAO,CAACC,MAAO,8BAA9C,CAAzB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ,EAH0C,CAI1C;AACA;AACA;AACA;AACA;AACH;AAED,eAAeT,MAAf","sourcesContent":["import axios from 'axios'\nimport { useRouter } from 'next/router'\nimport { useState } from 'react'\n\nconst Movies = () => {\n    // const [currentMovie, setCurrentMovie] = useState('')\n    const router = useRouter()\n    const { movieId } = router.query\n    console.log(movieId)\n    return (\n        <div>\n            <p>Helooo</p>\n            {/* <p>{movie.Title}</p> */}\n        </div>\n    )\n}\n\n// This function gets called at build time\n// export async function getStaticPaths() {\n// Call an external API endpoint to get posts\n\n// Get the paths we want to pre-render based on posts\n// const router = useRouter()\n// const { movieId } = router.query\n// let paths = []\n// paths = paths.push(movieId)\n// console.log(paths)\n// We'll pre-render only these paths at build time.\n// { fallback: false } means other routes should 404.\n// return { paths, fallback: false }\n// }\n\nexport async function getStaticProps(context) {\n    console.log(context.params)\n    const movie = await axios(`http://www.omdbapi.com/?i=\"${context.params}\"&type=movie&apikey=9bc37d14`)\n    console.log(movie)\n    // return {\n    //     props: {\n    //         movie\n    //     },\n    // }\n}\n\nexport default Movies"]},"metadata":{},"sourceType":"module"}