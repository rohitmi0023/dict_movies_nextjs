{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useState } from 'react';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport WordResults from '../../../components/WordResults';\nimport { useRouter } from 'next/router';\n\nvar dictionary = function dictionary(_ref) {\n  var data = _ref.data;\n\n  var _useState = useState(''),\n      searchWord = _useState[0],\n      setSearchWord = _useState[1];\n\n  var handleChange = function handleChange(e) {\n    return _regeneratorRuntime.async(function handleChange$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSearchWord(e.target.value);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var router = useRouter();\n  var imdbID = data.imdbID,\n      Title = data.Title,\n      Year = data.Year,\n      Poster = data.Poster,\n      Genre = data.Genre,\n      Director = data.Director,\n      Actors = data.Actors,\n      Metascore = data.Metascore,\n      imdbRating = data.imdbRating,\n      imdbVotes = data.imdbVotes;\n\n  var handleSubmit = function handleSubmit(e) {\n    var searchForm, config, body, res;\n    return _regeneratorRuntime.async(function handleSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            e.preventDefault();\n            searchForm = {\n              imdbID: imdbID,\n              Title: Title,\n              searchWord: searchWord,\n              Year: Year,\n              Poster: Poster,\n              Genre: Genre,\n              Director: Director,\n              Actors: Actors,\n              Metascore: Metascore,\n              imdbRating: imdbRating,\n              imdbVotes: imdbVotes\n            };\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            body = JSON.stringify(searchForm);\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(Axios.post(\"/\".concat(router.query.movieId, \"/dict\"), body, config));\n\n          case 6:\n            res = _context2.sent;\n            setSearchWord('');\n            console.log(res);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(Fragment, null, __jsx(\"p\", null, \"Movie Title: \", data.Title), __jsx(\"form\", {\n    onSubmit: function onSubmit(e) {\n      return handleSubmit(e);\n    }\n  }, __jsx(\"label\", null, \"Search\"), __jsx(\"input\", {\n    type: \"text\",\n    value: searchWord,\n    onChange: function onChange(e) {\n      return handleChange(e);\n    }\n  })), __jsx(WordResults, {\n    data: data\n  }));\n};\n\ndictionary.getInitialProps = function _callee(ctx) {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!ctx.query.movieId) {\n            _context3.next = 8;\n            break;\n          }\n\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"http://www.omdbapi.com/?i=\".concat(ctx.query.movieId, \"&type=movie&apikey=\").concat(process.env.OmdbKey)));\n\n        case 3:\n          res = _context3.sent;\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          data = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            data: data\n          });\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/[movieId]/dict.js"],"names":["React","Fragment","useState","Axios","fetch","WordResults","useRouter","dictionary","data","searchWord","setSearchWord","handleChange","e","target","value","router","imdbID","Title","Year","Poster","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","handleSubmit","preventDefault","searchForm","config","headers","body","JSON","stringify","post","query","movieId","res","console","log","getInitialProps","ctx","process","env","OmdbKey","json"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACIN,QAAQ,CAAC,EAAD,CADZ;AAAA,MACzBO,UADyB;AAAA,MACbC,aADa;;AAGhC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAMC,CAAN;AAAA;AAAA;AAAA;AAAA;AACpBF,YAAAA,aAAa,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;;AADoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAGA,MAAMC,MAAM,GAAGT,SAAS,EAAxB;AANgC,MAQ/BU,MAR+B,GAkB5BR,IAlB4B,CAQ/BQ,MAR+B;AAAA,MAS/BC,KAT+B,GAkB5BT,IAlB4B,CAS/BS,KAT+B;AAAA,MAU/BC,IAV+B,GAkB5BV,IAlB4B,CAU/BU,IAV+B;AAAA,MAW/BC,MAX+B,GAkB5BX,IAlB4B,CAW/BW,MAX+B;AAAA,MAY/BC,KAZ+B,GAkB5BZ,IAlB4B,CAY/BY,KAZ+B;AAAA,MAa/BC,QAb+B,GAkB5Bb,IAlB4B,CAa/Ba,QAb+B;AAAA,MAc/BC,MAd+B,GAkB5Bd,IAlB4B,CAc/Bc,MAd+B;AAAA,MAe/BC,SAf+B,GAkB5Bf,IAlB4B,CAe/Be,SAf+B;AAAA,MAgB/BC,UAhB+B,GAkB5BhB,IAlB4B,CAgB/BgB,UAhB+B;AAAA,MAiB/BC,SAjB+B,GAkB5BjB,IAlB4B,CAiB/BiB,SAjB+B;;AAoBhC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAMd,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBA,YAAAA,CAAC,CAACe,cAAF;AACMC,YAAAA,UAFc,GAED;AAClBZ,cAAAA,MAAM,EAANA,MADkB;AAElBC,cAAAA,KAAK,EAALA,KAFkB;AAGlBR,cAAAA,UAAU,EAAVA,UAHkB;AAIlBS,cAAAA,IAAI,EAAJA,IAJkB;AAKlBC,cAAAA,MAAM,EAANA,MALkB;AAMlBC,cAAAA,KAAK,EAALA,KANkB;AAOlBC,cAAAA,QAAQ,EAARA,QAPkB;AAQlBC,cAAAA,MAAM,EAANA,MARkB;AASlBC,cAAAA,SAAS,EAATA,SATkB;AAUlBC,cAAAA,UAAU,EAAVA,UAVkB;AAWlBC,cAAAA,SAAS,EAATA;AAXkB,aAFC;AAedI,YAAAA,MAfc,GAeL;AACdC,cAAAA,OAAO,EAAE;AACR,gCAAgB;AADR;AADK,aAfK;AAoBdC,YAAAA,IApBc,GAoBPC,IAAI,CAACC,SAAL,CAAeL,UAAf,CApBO;AAAA;AAAA,6CAqBFzB,KAAK,CAAC+B,IAAN,YAAenB,MAAM,CAACoB,KAAP,CAAaC,OAA5B,YAA4CL,IAA5C,EAAkDF,MAAlD,CArBE;;AAAA;AAqBdQ,YAAAA,GArBc;AAsBpB3B,YAAAA,aAAa,CAAC,EAAD,CAAb;AACA4B,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AAvBoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AA0BA,SACC,MAAC,QAAD,QACC,kCAAiB7B,IAAI,CAACS,KAAtB,CADD,EAEC;AAAM,IAAA,QAAQ,EAAE,kBAAAL,CAAC;AAAA,aAAIc,YAAY,CAACd,CAAD,CAAhB;AAAA;AAAjB,KACC,8BADD,EAEC;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEH,UAA1B;AAAsC,IAAA,QAAQ,EAAE,kBAAAG,CAAC;AAAA,aAAID,YAAY,CAACC,CAAD,CAAhB;AAAA;AAAjD,IAFD,CAFD,EAMC,MAAC,WAAD;AAAa,IAAA,IAAI,EAAEJ;AAAnB,IAND,CADD;AAUA,CAxDD;;AA0DAD,UAAU,CAACiC,eAAX,GAA6B,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACxBA,GAAG,CAACN,KAAJ,CAAUC,OADc;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAEThC,KAAK,qCACOqC,GAAG,CAACN,KAAJ,CAAUC,OADjB,gCAC8CM,OAAO,CAACC,GAAR,CAAYC,OAD1D,EAFI;;AAAA;AAErBP,UAAAA,GAFqB;AAAA;AAAA,2CAKRA,GAAG,CAACQ,IAAJ,EALQ;;AAAA;AAKrBrC,UAAAA,IALqB;AAAA,4CAMpB;AAAEA,YAAAA,IAAI,EAAJA;AAAF,WANoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B;;AAUA,eAAeD,UAAf","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport WordResults from '../../../components/WordResults';\nimport { useRouter } from 'next/router';\n\nconst dictionary = ({ data }) => {\n\tconst [searchWord, setSearchWord] = useState('');\n\n\tconst handleChange = async e => {\n\t\tsetSearchWord(e.target.value);\n\t};\n\tconst router = useRouter();\n\tconst {\n\t\timdbID,\n\t\tTitle,\n\t\tYear,\n\t\tPoster,\n\t\tGenre,\n\t\tDirector,\n\t\tActors,\n\t\tMetascore,\n\t\timdbRating,\n\t\timdbVotes,\n\t} = data;\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault();\n\t\tconst searchForm = {\n\t\t\timdbID,\n\t\t\tTitle,\n\t\t\tsearchWord,\n\t\t\tYear,\n\t\t\tPoster,\n\t\t\tGenre,\n\t\t\tDirector,\n\t\t\tActors,\n\t\t\tMetascore,\n\t\t\timdbRating,\n\t\t\timdbVotes,\n\t\t};\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t};\n\t\tconst body = JSON.stringify(searchForm);\n\t\tconst res = await Axios.post(`/${router.query.movieId}/dict`, body, config);\n\t\tsetSearchWord('');\n\t\tconsole.log(res);\n\t};\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<p>Movie Title: {data.Title}</p>\n\t\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t<label>Search</label>\n\t\t\t\t<input type='text' value={searchWord} onChange={e => handleChange(e)}></input>\n\t\t\t</form>\n\t\t\t<WordResults data={data} />\n\t\t</Fragment>\n\t);\n};\n\ndictionary.getInitialProps = async ctx => {\n\tif (ctx.query.movieId) {\n\t\tconst res = await fetch(\n\t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t);\n\t\tconst data = await res.json();\n\t\treturn { data };\n\t}\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}