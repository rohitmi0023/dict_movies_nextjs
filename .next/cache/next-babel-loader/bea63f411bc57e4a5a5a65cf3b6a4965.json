{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router'; // import WordResults from '../../components/WordResults';\n\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport ExposureNeg1TwoToneIcon from '@material-ui/icons/ExposureNeg1TwoTone';\n\nconst dictionary = ({\n  data\n}) => {\n  const {\n    0: searchWord,\n    1: setSearchWord\n  } = useState('');\n  const {\n    0: words,\n    1: setWords\n  } = useState({\n    response: '',\n    upIcon: ''\n  });\n\n  const handleChange = async e => {\n    setSearchWord(e.target.value);\n  };\n\n  const router = useRouter();\n  const {\n    imdbID,\n    Title,\n    Year,\n    Poster,\n    Genre,\n    Director,\n    Actors,\n    Metascore,\n    imdbRating,\n    imdbVotes\n  } = data; // const handleSubmit = async e => {\n  // \te.preventDefault();\n  // \tconst searchForm = {\n  // \t\timdbID,\n  // \t\tTitle,\n  // \t\tsearchWord,\n  // \t\tYear,\n  // \t\tPoster,\n  // \t\tGenre,\n  // \t\tDirector,\n  // \t\tActors,\n  // \t\tMetascore,\n  // \t\timdbRating,\n  // \t\timdbVotes,\n  // \t};\n  // \ttry {\n  // \t\tconst config = {\n  // \t\t\theaders: {\n  // \t\t\t\t'Content-Type': 'application/json',\n  // \t\t\t},\n  // \t\t};\n  // \t\tconst body = JSON.stringify(searchForm);\n  // \t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n  // \t\tsetSearchWord('');\n  // \t\tconst config2 = {\n  // \t\t\t'Content-Type': 'application/json',\n  // \t\t};\n  // \t\tAxios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n  // \t\t\tsetWords(res);\n  // \t\t});\n  // \t\talert(res.data);\n  // \t} catch (err) {\n  // \t\tif (err) throw err;\n  // \t\tconsole.log(err);\n  // \t}\n  // };\n\n  useEffect(() => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n    Axios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n      setWords(_objectSpread({}, words, {\n        response: `${res}`,\n        upIcon: `${ExposureNeg1TwoToneIcon}`\n      }));\n    });\n  }, []);\n  return __jsx(\"div\", {\n    className: \"container\"\n  }, console.log(words), __jsx(Head, null, __jsx(\"title\", null, \"Next App\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\",\n    integrity: \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\",\n    crossorigin: \"anonymous\"\n  })), __jsx(\"p\", null, \"Movie Title: \", data.Title), __jsx(\"br\", null));\n};\n\ndictionary.getInitialProps = async ctx => {\n  if (ctx.query.movieId) {\n    const res = await fetch(`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`);\n    const data = await res.json();\n    return {\n      data\n    };\n  }\n};\n\nexport default dictionary;","map":{"version":3,"sources":["/home/rohitmi0023/dict_movies_next/frontend/pages/[movieId]/dict.js"],"names":["React","Fragment","useState","useEffect","Head","Axios","fetch","useRouter","Button","Form","FormGroup","Label","Input","ExposureNeg1TwoToneIcon","dictionary","data","searchWord","setSearchWord","words","setWords","response","upIcon","handleChange","e","target","value","router","imdbID","Title","Year","Poster","Genre","Director","Actors","Metascore","imdbRating","imdbVotes","config","get","query","movieId","then","res","console","log","getInitialProps","ctx","process","env","OmdbKey","json"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Axios from 'axios';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\n// import WordResults from '../../components/WordResults';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport ExposureNeg1TwoToneIcon from '@material-ui/icons/ExposureNeg1TwoTone';\n\nconst dictionary = ({ data }) => {\n\tconst [searchWord, setSearchWord] = useState('');\n\tconst [words, setWords] = useState({\n\t\tresponse: '',\n\t\tupIcon: '',\n\t});\n\n\tconst handleChange = async e => {\n\t\tsetSearchWord(e.target.value);\n\t};\n\tconst router = useRouter();\n\tconst {\n\t\timdbID,\n\t\tTitle,\n\t\tYear,\n\t\tPoster,\n\t\tGenre,\n\t\tDirector,\n\t\tActors,\n\t\tMetascore,\n\t\timdbRating,\n\t\timdbVotes,\n\t} = data;\n\n\t// const handleSubmit = async e => {\n\t// \te.preventDefault();\n\t// \tconst searchForm = {\n\t// \t\timdbID,\n\t// \t\tTitle,\n\t// \t\tsearchWord,\n\t// \t\tYear,\n\t// \t\tPoster,\n\t// \t\tGenre,\n\t// \t\tDirector,\n\t// \t\tActors,\n\t// \t\tMetascore,\n\t// \t\timdbRating,\n\t// \t\timdbVotes,\n\t// \t};\n\t// \ttry {\n\t// \t\tconst config = {\n\t// \t\t\theaders: {\n\t// \t\t\t\t'Content-Type': 'application/json',\n\t// \t\t\t},\n\t// \t\t};\n\t// \t\tconst body = JSON.stringify(searchForm);\n\t// \t\tconst res = await Axios.post(`/api/${router.query.movieId}/dict`, body, config);\n\t// \t\tsetSearchWord('');\n\t// \t\tconst config2 = {\n\t// \t\t\t'Content-Type': 'application/json',\n\t// \t\t};\n\t// \t\tAxios.get(`/api/${router.query.movieId}/dict`, config2).then(res => {\n\t// \t\t\tsetWords(res);\n\t// \t\t});\n\t// \t\talert(res.data);\n\t// \t} catch (err) {\n\t// \t\tif (err) throw err;\n\t// \t\tconsole.log(err);\n\t// \t}\n\t// };\n\n\tuseEffect(() => {\n\t\tconst config = {\n\t\t\t'Content-Type': 'application/json',\n\t\t};\n\t\tAxios.get(`/api/${router.query.movieId}/dict`, config).then(res => {\n\t\t\tsetWords({ ...words, response: `${res}`, upIcon: `${ExposureNeg1TwoToneIcon}` });\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<div className='container'>\n\t\t\t{console.log(words)}\n\t\t\t<Head>\n\t\t\t\t<title>Next App</title>\n\t\t\t\t<link\n\t\t\t\t\trel='stylesheet'\n\t\t\t\t\thref='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css'\n\t\t\t\t\tintegrity='sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm'\n\t\t\t\t\tcrossorigin='anonymous'\n\t\t\t\t/>\n\t\t\t</Head>\n\t\t\t<p>Movie Title: {data.Title}</p>\n\t\t\t{/* <Form onSubmit={e => handleSubmit(e)}>\n\t\t\t\t<FormGroup>\n\t\t\t\t\t<Label>Search</Label>\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tvalue={searchWord}\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tonChange={e => handleChange(e)}\n\t\t\t\t\t\tplaceholder='Enter the word'\n\t\t\t\t\t></Input>\n\t\t\t\t</FormGroup>\n\t\t\t\t<Button type='submit' className='btn btn-primary'>\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t</Form> */}\n\t\t\t<br />\n\t\t\t{/* <WordResults words={words} /> */}\n\t\t</div>\n\t);\n};\n\ndictionary.getInitialProps = async ctx => {\n\tif (ctx.query.movieId) {\n\t\tconst res = await fetch(\n\t\t\t`http://www.omdbapi.com/?i=${ctx.query.movieId}&type=movie&apikey=${process.env.OmdbKey}`\n\t\t);\n\t\tconst data = await res.json();\n\t\treturn { data };\n\t}\n};\n\nexport default dictionary;\n"]},"metadata":{},"sourceType":"module"}